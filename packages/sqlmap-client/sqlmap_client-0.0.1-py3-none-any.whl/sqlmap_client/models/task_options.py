# coding: utf-8

"""
    SQLMap Server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from sqlmap_client.configuration import Configuration


class TaskOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'level': 'int',
        'risk': 'int',
        'technique': 'str',
        'verbose': 'int',
        'dbms': 'str',
        'threads': 'int'
    }

    attribute_map = {
        'level': 'level',
        'risk': 'risk',
        'technique': 'technique',
        'verbose': 'verbose',
        'dbms': 'dbms',
        'threads': 'threads'
    }

    def __init__(self, level=None, risk=None, technique=None, verbose=None, dbms=None, threads=None, local_vars_configuration=None):  # noqa: E501
        """TaskOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._level = None
        self._risk = None
        self._technique = None
        self._verbose = None
        self._dbms = None
        self._threads = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if risk is not None:
            self.risk = risk
        if technique is not None:
            self.technique = technique
        if verbose is not None:
            self.verbose = verbose
        if dbms is not None:
            self.dbms = dbms
        if threads is not None:
            self.threads = threads

    @property
    def level(self):
        """Gets the level of this TaskOptions.  # noqa: E501


        :return: The level of this TaskOptions.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this TaskOptions.


        :param level: The level of this TaskOptions.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def risk(self):
        """Gets the risk of this TaskOptions.  # noqa: E501


        :return: The risk of this TaskOptions.  # noqa: E501
        :rtype: int
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this TaskOptions.


        :param risk: The risk of this TaskOptions.  # noqa: E501
        :type: int
        """

        self._risk = risk

    @property
    def technique(self):
        """Gets the technique of this TaskOptions.  # noqa: E501


        :return: The technique of this TaskOptions.  # noqa: E501
        :rtype: str
        """
        return self._technique

    @technique.setter
    def technique(self, technique):
        """Sets the technique of this TaskOptions.


        :param technique: The technique of this TaskOptions.  # noqa: E501
        :type: str
        """

        self._technique = technique

    @property
    def verbose(self):
        """Gets the verbose of this TaskOptions.  # noqa: E501


        :return: The verbose of this TaskOptions.  # noqa: E501
        :rtype: int
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this TaskOptions.


        :param verbose: The verbose of this TaskOptions.  # noqa: E501
        :type: int
        """

        self._verbose = verbose

    @property
    def dbms(self):
        """Gets the dbms of this TaskOptions.  # noqa: E501


        :return: The dbms of this TaskOptions.  # noqa: E501
        :rtype: str
        """
        return self._dbms

    @dbms.setter
    def dbms(self, dbms):
        """Sets the dbms of this TaskOptions.


        :param dbms: The dbms of this TaskOptions.  # noqa: E501
        :type: str
        """

        self._dbms = dbms

    @property
    def threads(self):
        """Gets the threads of this TaskOptions.  # noqa: E501


        :return: The threads of this TaskOptions.  # noqa: E501
        :rtype: int
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this TaskOptions.


        :param threads: The threads of this TaskOptions.  # noqa: E501
        :type: int
        """

        self._threads = threads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskOptions):
            return True

        return self.to_dict() != other.to_dict()
