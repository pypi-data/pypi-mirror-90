# util-moddep.make
#
# Module & dependency tracking relies on two variables per source file:
#  - FORT_MOD_OUTPUT_$(source)
#  - FORT_MOD_DEPEND_$(source)
#
# The former defines the modules that are generated by $(source). The latter
# lists the modules that $(source) depends on.
#
# The variables may be manipulated with the following functions:
#
#   - MOD_output_add(source,output(s))
#   - MOD_output_add_default(source)
#   - MOD_output_get(source)
#
# `MOD_output_add_default` adds the default output (i.e., a module named after
# the source file) to the list; this is only required if multiple modules are
# created from $(source), and one of these is the default module.
# `MOD_output_get()` retrieves the list of modules output by $(source). If no
# modules were added explicitly, it defaults to a module named after $(source).
#   
#   
#   - MOD_depend_add(source,depend(s))
#   - MOD_depend_get(source)
#
# Note that unlike `MOD_output_get()`, `MOD_depend_get()` will return an empty
# list if no dependencies were added manually.
#
# NOTE: Unlike fortran source code, module names in make are case-sensitive.
# Only lower-case file names should be used, as fortran compilers seem to
# output lower-case module file names only.

define MOD_output_add =
$(eval FORT_MOD_OUTPUT_$(strip $1) += $(foreach m,$2,$(BAKEDMODDEST)/$(strip $m)))
endef
define MOD_output_add_default =
$(eval FORT_MOD_OUTPUT_$(strip $1) += $(BAKEDMODDEST)/$(shell echo $(basename $(notdir $1)) | tr '[:upper:]' '[:lower:]').mod)
endef
define MOD_output_get =
$(or $(FORT_MOD_OUTPUT_$(strip $1)),$(BAKEDMODDEST)/$(shell echo $(basename $(notdir $1)) | tr '[:upper:]' '[:lower:]').mod)
endef

define MOD_depend_add =
$(eval FORT_MOD_DEPEND_$(strip $1) += $(foreach m,$2,$(BAKEDMODDEST)/$(strip $m)))
endef
define MOD_depend_get =
$(FORT_MOD_DEPEND_$(strip $1))
endef

#EOF vim:syntax=make:foldmethod=marker:ts=4:noexpandtab:
