from typing import Any, Dict, List, Optional
import shutil
import sys
import sysconfig
import setuptools
from pathlib import Path
from build_nlopt import build_nlopt, SYSTEM_WINDOWS
from extension_geometry import geometry_extension
from setuptools import Extension
from setuptools.command.build_ext import build_ext
from setuptools.dist import Distribution


class BinaryDistribution(Distribution):
    def is_pure(self):  # noqa
        return False


class MCKitBuilder(build_ext):
    def __init__(self, dist: Distribution, **kwargs) -> None:
        build_ext.__init__(self, dist, **kwargs)
        pass

    def finalize_options(self):
        build_ext.finalize_options(self)
        # Late import to use numpy installed on isolated build
        import numpy as np

        root_prefix = Path(sys.prefix)
        if SYSTEM_WINDOWS:
            root_prefix = root_prefix / "Library"
        self.include_dirs.append(np.get_include())
        self.include_dirs.append(str(root_prefix / "include"))
        library_dir = root_prefix / "lib"
        self.library_dirs.append(str(library_dir))

    def build_extension(self, extension: Extension) -> None:
        build_ext.build_extension(self, extension)

        assert extension.name == "mckit.geometry"
        # ext_dir = Path(self.get_ext_fullpath(extension.name)).parent.absolute()
        # .. copy nlopt.dll to mckit source package dir


def build(setup_kwargs: Dict[str, Any]) -> None:
    """
    Set specific distribution options.

    This function is called with setup.py generated by pip from pyproject.toml.
    """
    nlopt_build_dir = build_nlopt(clean=True)
    update_package_data(setup_kwargs, nlopt_build_dir)
    update_setup_requires(setup_kwargs)
    setup_kwargs.update(
        {
            "ext_modules": [geometry_extension],
            "cmdclass": {"build_ext": MCKitBuilder},
            "distclass": BinaryDistribution,
            "long_description": Path("README.rst").read_text(encoding="utf8"),
            "src_root": str(Path(__file__).parent),
        }
    )
    save_setup_py()


def update_setup_requires(setup_kwargs: Dict[str, Any]) -> None:
    """ fix for poetry issue: it doesn't install setup requirements """
    setup_requires = setup_kwargs.get("setup_requires")  # type: Optional[List[str]]
    assert (
        setup_requires is None
    ), "Poetry has created setup_requires! Check the setup-generated.py"
    setup_requires = []
    setup_requires.extend(
        [
            # pip builds pyd for wrong (the oldest) version, attempt to fix (failed)
            # f"python_requires=={sysconfig.get_python_version()}",
            "poetry-core>=1.0.0",
            "setuptools>=43.0",
            "wheel",
            "cmake>=3.18.4",
            "numpy>=1.13",
            "mkl-devel",
        ]
    )
    setup_kwargs["setup_requires"] = setup_requires


def update_package_data(setup_kwargs: Dict[str, Any], nlopt_build_dir: Path) -> None:
    """ fix for poetry issue: it doesn't provide correct specification from `[tool.poetry].input` field"""

    package_data = [
        "data/isotopes.dat",
    ]
    if SYSTEM_WINDOWS:
        mckit_package_path = Path(__file__).parent / "mckit"
        if sysconfig.get_python_version() < "3.8":
            # Since py38 this is not necessary, see mckit/__init__.py for add_dll_directory()
            # For py37 we have to store nlopt.dll in the source tree
            nlopt_dll = nlopt_build_dir / "Release/nlopt.dll"
            if not nlopt_dll.exists():
                raise FileNotFoundError(nlopt_dll)
            shutil.copy(str(nlopt_dll), str(mckit_package_path))
            package_data.append("nlopt.dll")

        for mask in ["*.pyd"]:
            package_data.extend(
                map(lambda x: str(x.name), mckit_package_path.glob(mask))
            )

    setup_kwargs["package_data"] = {"mckit": package_data}


def save_setup_py() -> None:
    setup_py = Path("setup.py")
    if setup_py.exists():
        shutil.copy(str(setup_py), "setup-generated.py")
