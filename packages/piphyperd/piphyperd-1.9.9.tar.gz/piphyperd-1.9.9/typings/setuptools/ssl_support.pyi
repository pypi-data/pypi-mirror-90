"""
This type stub file was generated by pyright.
"""

cert_paths = """
/etc/pki/tls/certs/ca-bundle.crt
/etc/ssl/certs/ca-certificates.crt
/usr/share/ssl/certs/ca-bundle.crt
/usr/local/share/certs/ca-root.crt
/etc/ssl/cert.pem
/System/Library/OpenSSL/certs/cert.pem
/usr/local/share/certs/ca-root-nss.crt
/etc/ssl/ca-bundle.pem
""".strip().split()
is_available = ssl is not None and object not in (HTTPSHandler, HTTPSConnection)
if not CertificateError:
    class CertificateError(ValueError):
        ...
    
    
if not match_hostname:
    def match_hostname(cert, hostname):
        """Verify that *cert* (in decoded format as returned by
        SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
        rules are followed, but IP addresses are not accepted for *hostname*.

        CertificateError is raised on failure. On success, the function
        returns nothing.
        """
        ...
    
class VerifyingHTTPSHandler(HTTPSHandler):
    """Simple verifying handler: no auth, subclasses, timeouts, etc."""
    def __init__(self, ca_bundle) -> None:
        ...
    
    def https_open(self, req):
        ...
    


class VerifyingHTTPSConn(HTTPSConnection):
    """Simple verifying connection: no auth, subclasses, timeouts, etc."""
    def __init__(self, host, ca_bundle, **kw) -> None:
        ...
    
    def connect(self):
        ...
    


def opener_for(ca_bundle=...):
    """Get a urlopen() replacement that uses ca_bundle for verification"""
    ...

def once(func):
    ...

@once
def get_win_certfile():
    class CertFile(wincertstore.CertFile):
        ...
    
    

def find_ca_bundle():
    """Return an existing CA bundle path, or None"""
    ...

