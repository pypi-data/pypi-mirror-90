"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rmCommand = exports.addCommand = void 0;
const fs_1 = require("fs");
const got_1 = __importDefault(require("got"));
const path_1 = __importDefault(require("path"));
const install_1 = require("./install");
async function addCommand(addValue, commandOptions) {
    const { cwd, config, pkgManifest } = commandOptions;
    let [pkgName, pkgSemver] = addValue.split('@');
    if (!pkgSemver) {
        const body = (await got_1.default(`http://registry.npmjs.org/${pkgName}/latest`).json());
        pkgSemver = `^${body.version}`;
    }
    pkgManifest.webDependencies = pkgManifest.webDependencies || {};
    pkgManifest.webDependencies[pkgName] = pkgSemver;
    config.webDependencies = config.webDependencies || {};
    config.webDependencies[pkgName] = pkgSemver;
    await fs_1.promises.writeFile(path_1.default.join(cwd, 'package.json'), JSON.stringify(pkgManifest, null, 2));
    await install_1.command(commandOptions);
}
exports.addCommand = addCommand;
async function rmCommand(addValue, commandOptions) {
    const { cwd, config, pkgManifest } = commandOptions;
    let [pkgName] = addValue.split('@');
    pkgManifest.webDependencies = pkgManifest.webDependencies || {};
    delete pkgManifest.webDependencies[pkgName];
    config.webDependencies = config.webDependencies || {};
    delete config.webDependencies[pkgName];
    await fs_1.promises.writeFile(path_1.default.join(cwd, 'package.json'), JSON.stringify(pkgManifest, null, 2));
    await install_1.command(commandOptions);
}
exports.rmCommand = rmCommand;
//# sourceMappingURL=add-rm.js.map