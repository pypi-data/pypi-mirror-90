# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
Output Module

"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_output', [dirname(__file__)])
        except ImportError:
            import _output
            return _output
        if fp is not None:
            try:
                _mod = imp.load_module('_output', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _output = swig_import_helper()
    del swig_import_helper
else:
    import _output
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_output.MAXFILENAME_swigconstant(_output)
MAXFILENAME = _output.MAXFILENAME

_output.MAXELENAME_swigconstant(_output)
MAXELENAME = _output.MAXELENAME

def init() -> "SMO_Handle *":
    """
    Initialize pointer for output handle.

    Returns
    -------
    p_handle: SMO_Handle *
        A SWMM output handle

    """
    return _output.init()

def close(p_handle: 'SMO_Handle') -> "int":
    """
    Close binary output file and perform cleanup. 

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle

    """
    return _output.close(p_handle)

def open(p_handle: 'SMO_Handle', path: 'char const *') -> "int":
    """
    Open binary output file and reads prologue and epilogue.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    path: char const *
        The name of the binary output file to be opened.

    """
    return _output.open(p_handle, path)

def get_version(p_handle: 'SMO_Handle') -> "int *":
    """
    Get the SWMM version that produced the binary output file. 

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle

    Returns
    -------
    version: int *
        The SWMM version number found in the output file prologue.


    """
    return _output.get_version(p_handle)

def get_proj_size(p_handle: 'SMO_Handle') -> "int *":
    """
    Project element counts.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle

    Returns
    -------
    elementCount:int **
        Array of element count values
    length:int *
        Array size

    """
    return _output.get_proj_size(p_handle)

def get_units(p_handle: 'SMO_Handle') -> "int *":
    """
    Project unit flags for unit_system, flow, and pollutants.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle

    Returns
    -------
    unitFlag: int **
        Array of unit flag values
    length: int *
        Array length

    """
    return _output.get_units(p_handle)

def get_start_date(p_handle: 'SMO_Handle') -> "double *":
    """
    Analysis start date.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle

    Returns
    -------
    date: double *
        SWMM simulation start date (encoded)

    """
    return _output.get_start_date(p_handle)

def get_times(p_handle: 'SMO_Handle', code: 'SMO_time') -> "int *":
    """
    Analysis step size and number of periods.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    code: SMO_time
        A time parameter code (see :ref: SMO_Time)

    Returns
    -------
    time: int *
        Time value

    """
    return _output.get_times(p_handle, code)

def get_elem_name(p_handle: 'SMO_Handle', type: 'SMO_elementType', elementIndex: 'int') -> "int *":
    """
    Given an element index returns the element name.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    type: SMO_elementType
        The type of the element being queried
    elementIndex: int
        The index of the element being queried

    Returns
    -------
    name: char **
        Element name array
    length: int *
        Length of array

    """
    return _output.get_elem_name(p_handle, type, elementIndex)

def get_subcatch_series(p_handle: 'SMO_Handle', subcatchIndex: 'int', attr: 'SMO_subcatchAttribute', startPeriod: 'int', endPeriod: 'int') -> "int *":
    """
    Get time series results for particular attribute. Specify series start and 
    length using timeIndex and length respectively.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    subcatchIndex: int
        The subcatchment index for time series
    attr: SMO_subcatchAttribute
        Code for the subcatch attribute to report (see :ref: SMO_subcatchAttribute)
    startPeriod: int
        Time period of series start
    endPeriod: int
        Time period of series end

    Returns
    -------
    outValueArray: float **
        Array of time series values
    length: int *
        Length of array

    """
    return _output.get_subcatch_series(p_handle, subcatchIndex, attr, startPeriod, endPeriod)

def get_node_series(p_handle: 'SMO_Handle', nodeIndex: 'int', attr: 'SMO_nodeAttribute', startPeriod: 'int', endPeriod: 'int') -> "int *":
    """
    Get time series results for particular attribute. Specify series start and 
    length using timeIndex and length respectively.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    nodeIndex: int
        The node index for time series
    attr: SMO_nodeAttribute
        Code for the node attribute to report (see :ref: SMO_nodeAttribute)
    startPeriod: int
        Time period of series start
    endPeriod: int
        Time period of series end

    Returns
    -------
    outValueArray: float **
        Array of time series values
    length: int *
        Length of array

    """
    return _output.get_node_series(p_handle, nodeIndex, attr, startPeriod, endPeriod)

def get_link_series(p_handle: 'SMO_Handle', linkIndex: 'int', attr: 'SMO_linkAttribute', startPeriod: 'int', endPeriod: 'int') -> "int *":
    """
    Get time series results for particular attribute. Specify series start and 
    length using timeIndex and length respectively.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    linkIndex: int
        The link index for time series
    attr: SMO_linkAttribute
        Code for the link attribute to report (see :ref: SMO_linkAttribute)
    startPeriod: int
        Time period of series start
    endPeriod: int
        Time period of series end

    Returns
    -------
    outValueArray: float **
        Array of time series values
    length: int *
        Length of array

    """
    return _output.get_link_series(p_handle, linkIndex, attr, startPeriod, endPeriod)

def get_system_series(p_handle: 'SMO_Handle', attr: 'SMO_systemAttribute', startPeriod: 'int', endPeriod: 'int') -> "int *":
    """
    Get time series results for particular attribute. Specify series start and 
    length using timeIndex and length respectively.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    attr: SMO_systemAttribute
        Code for the system attribute to report (see :ref: SMO_systemAttribute)
    startPeriod: int
        Time period of series start
    endPeriod: int
        Time period of series end

    Returns
    -------
    outValueArray: float **
        Array of time series values
    length: int *
        Length of array

    """
    return _output.get_system_series(p_handle, attr, startPeriod, endPeriod)

def get_subcatch_attribute(p_handle: 'SMO_Handle', timeIndex: 'int', attr: 'SMO_subcatchAttribute') -> "int *":
    """
    For all subcatchments at given time, get a particular attribute.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    attr: SMO_subcatchAttribute
        Code for the subcatchment attribute to report (see :ref: SMO_subcatchAttribute)

    Returns
    -------
    outValueArray: float **
        The array of subcatchment attribute values
    length: int *
        Length of array

    """
    return _output.get_subcatch_attribute(p_handle, timeIndex, attr)

def get_node_attribute(p_handle: 'SMO_Handle', timeIndex: 'int', attr: 'SMO_nodeAttribute') -> "int *":
    """
    For all nodes at given time, get a particular attribute.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    attr: SMO_nodeAttribute
        Code for the node attribute to report (see :ref: SMO_nodeAttribute)

    Returns
    -------
    outValueArray: float **
        The array of node attribute values
    length: int *
        Length of array

    """
    return _output.get_node_attribute(p_handle, timeIndex, attr)

def get_link_attribute(p_handle: 'SMO_Handle', timeIndex: 'int', attr: 'SMO_linkAttribute') -> "int *":
    """
    For all links at given time, get a particular attribute.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    attr: SMO_linkAttribute
        Code for the link attribute to report (see :ref: SMO_linkAttribute)

    Returns
    -------
    outValueArray: float **
        The array of link attribute values
    length: int *
        Length of array

    """
    return _output.get_link_attribute(p_handle, timeIndex, attr)

def get_system_attribute(p_handle: 'SMO_Handle', timeIndex: 'int', attr: 'SMO_systemAttribute') -> "int *":
    """
    For the system at given time, get a particular attribute.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    attr: SMO_systemAttribute
        Code for the system attribute to report (see :ref: SMO_systemAttribute)

    Returns
    -------
    outValueArray: float **
        The array of system attribute values
    length: int *
        Length of array

    """
    return _output.get_system_attribute(p_handle, timeIndex, attr)

def get_subcatch_result(p_handle: 'SMO_Handle', timeIndex: 'int', subcatchIndex: 'int') -> "int *":
    """
    For a subcatchment at given time, get all attributes.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    subcatchIndex: int
        The subcatchment index for reporting results

    Returns
    -------
    outValueArray: float **
        The array of subcatchment result values
    length: int *
        Length of array

    """
    return _output.get_subcatch_result(p_handle, timeIndex, subcatchIndex)

def get_node_result(p_handle: 'SMO_Handle', timeIndex: 'int', nodeIndex: 'int') -> "int *":
    """
    For a node at given time, get all attributes.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    nodeIndex: int
        The node index for reporting results

    Returns
    -------
    outValueArray: float **
        The array of node result values
    length: int *
        Length of array

    """
    return _output.get_node_result(p_handle, timeIndex, nodeIndex)

def get_link_result(p_handle: 'SMO_Handle', timeIndex: 'int', linkIndex: 'int') -> "int *":
    """
    For a link at given time, get all attributes.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    linkIndex: int
        The link index for reporting results

    Returns
    -------
    outValueArray: float **
        The array of link result values
    length: int *
        Length of array

    """
    return _output.get_link_result(p_handle, timeIndex, linkIndex)

def get_system_result(p_handle: 'SMO_Handle', timeIndex: 'int', dummyIndex: 'int') -> "int *":
    """
    For the system at given time, get all attributes.

    Parameters
    ----------
    p_handle: SMO_Handle
        A SWMM output handle
    timeIndex: int
        The time period index for reporting results
    dummyIndex: int
        No-op for API consistency

    Returns
    -------
    outValueArray: float **
        The array of system result values
    length: int *
        Length of array

    """
    return _output.get_system_result(p_handle, timeIndex, dummyIndex)
# This file is compatible with both classic and new-style classes.


