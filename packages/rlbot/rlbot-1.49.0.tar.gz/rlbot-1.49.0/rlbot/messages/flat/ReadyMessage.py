# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flat

import flatbuffers

# /// Sent when connecting to RLBot to indicate what type of messages are desired.
# /// This could be sent by a bot, or a bot manager governing several bots, an
# /// overlay, or any other utility that connects to the RLBot process.
class ReadyMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsReadyMessage(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReadyMessage()
        x.Init(buf, n + offset)
        return x

    # ReadyMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReadyMessage
    def DesiredTickRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ReadyMessage
    def WantsBallPredictions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ReadyMessage
    def WantsQuickChat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ReadyMessage
    def WantsStatEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ReadyMessage
    def WantsSpectateEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ReadyMessage
    def WantsPlayerInputEvents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def ReadyMessageStart(builder): builder.StartObject(6)
def ReadyMessageAddDesiredTickRate(builder, desiredTickRate): builder.PrependInt32Slot(0, desiredTickRate, 0)
def ReadyMessageAddWantsBallPredictions(builder, wantsBallPredictions): builder.PrependBoolSlot(1, wantsBallPredictions, 0)
def ReadyMessageAddWantsQuickChat(builder, wantsQuickChat): builder.PrependBoolSlot(2, wantsQuickChat, 0)
def ReadyMessageAddWantsStatEvents(builder, wantsStatEvents): builder.PrependBoolSlot(3, wantsStatEvents, 0)
def ReadyMessageAddWantsSpectateEvents(builder, wantsSpectateEvents): builder.PrependBoolSlot(4, wantsSpectateEvents, 0)
def ReadyMessageAddWantsPlayerInputEvents(builder, wantsPlayerInputEvents): builder.PrependBoolSlot(5, wantsPlayerInputEvents, 0)
def ReadyMessageEnd(builder): return builder.EndObject()
