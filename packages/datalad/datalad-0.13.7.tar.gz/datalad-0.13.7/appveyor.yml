image:
  - Visual Studio 2019

build: false

environment:
  MINICONDA: C:\Miniconda37
  DATALAD_TESTS_SSH: 1

  # each matrix run comes with about 150s of setup overhead
  matrix:
    # more modern functionality
    - TEST_SELECTION: datalad.core datalad.local datalad.distributed datalad.tests.test_witless_runner datalad.tests.test_config
    # older, but essential functionality
    - TEST_SELECTION: datalad.cmdline datalad.distribution datalad.interface datalad.support datalad.ui datalad.downloaders.tests.test_credentials datalad.downloaders.tests.test_providers datalad.downloaders.tests.test_s3 datalad.tests.test_api datalad.tests.test_constraints datalad.tests.test_dochelpers
    # assorted other tests
    - TEST_SELECTION: datalad.metadata.tests.test_search datalad.metadata.tests.test_extract_metadata datalad.metadata.extractors.tests.test_frictionless_datapackage datalad.metadata.extractors.tests.test_rfc822 datalad.tests.test_utils datalad.tests.test_base datalad.tests.test_installed datalad.tests.test_interface datalad.tests.test_misc datalad.tests.test_s3 datalad.tests.test_testrepos datalad.tests.test_utils_testrepos datalad.tests.test_archives datalad.plugin
    # also execute tests that probably still not run, but it will be
    # easier to pick the working one from the log
    - KNOWN2FAIL: 1
      TEST_SELECTION: datalad.customremotes datalad.downloaders.tests.test_http datalad.metadata.extractors.tests.test_base datalad.metadata.test_aggregation datalad.metadata.test_base datalad.metadata.extractors.tests.test_datacite_xml datalad.tests.test__main__ datalad.tests.test_cmd datalad.tests.test_log datalad.tests.test_protocols datalad.tests.test_auto datalad.tests.test_tests_utils
 
matrix:
  allow_failures:
    - KNOWN2FAIL: 1

cache:
  # cache the pip cache
  - C:\Users\appveyor\AppData\Local\pip\Cache -> appveyor.yml

init:
  # alter machine PATH setting to have git-core tools and SSH installation
  # accessible even when SSHing into localhost (see gh-3683)
  - ps: '[System.Environment]::SetEnvironmentVariable("PATH", "$env:Path;C:\Program Files\Git\mingw64\libexec\git-core;C:\projects\datalad\resources\OpenSSH-Win32", [System.EnvironmentVariableTarget]::Machine)'
  # this will display login RDP info for the build VM, but if the build VM should block
  # see on_finish below instead
  #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
install:
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - "conda create -q -n test-environment"
  - activate test-environment
  - mkdir resources
  # define test host alias
  - echo. >> %SYSTEMROOT%\System32\drivers\etc\hosts
  - echo.127.0.0.1  datalad-test >> %SYSTEMROOT%\System32\drivers\etc\hosts
  - echo.127.0.0.1  datalad-test2 >> %SYSTEMROOT%\System32\drivers\etc\hosts
  # OpenSSH server setup
  - appveyor DownloadFile https://github.com/PowerShell/Win32-OpenSSH/releases/download/v7.6.1.0p1-Beta/OpenSSH-Win32.zip -FileName resources\openssh.zip
  - 7z x -o"resources" resources\openssh.zip
  # install
  - powershell.exe -ExecutionPolicy Bypass -File resources\OpenSSH-Win32\install-sshd.ps1
  # configure service
  - powershell.exe New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
  # keys in default place
  - ssh-keygen -f C:\Users\appveyor\.ssh\id_rsa -N ""
  # authorize access with these keys
  - copy C:\Users\appveyor\.ssh\id_rsa.pub c:\Users\appveyor\.ssh\authorized_keys
  - copy tools\ci\appveyor_ssh_config c:\Users\appveyor\.ssh\config
  # fire up service
  - net start sshd
  # test login
  - ssh -v localhost exit
  - ssh datalad-test exit
  - ssh datalad-test2 exit
  # git annex setup
  # latest version
  #- appveyor DownloadFile https://downloads.kitenet.net/git-annex/windows/current/git-annex-installer.exe -FileName resources\git-annex-installer.exe
  # specific version mih uses to debug on real win10 box
  #- appveyor DownloadFile http://store.datalad.org/git-annex/windows/git-annex_8.20200309.exe -FileName resources\git-annex-installer.exe
  # datalad-extensions built version with fixed up special remotes handling
  - appveyor DownloadFile http://datasets.datalad.org/datalad/packages/windows/git-annex-installer_8.20201007+git171-g7e24b2587_x64.exe -FileName resources\git-annex-installer.exe
  # extract git annex into the system Git installation path
  - 7z x -aoa -o"C:\\Program Files\Git" resources\git-annex-installer.exe
  # info on how python is ticking
  - python -c "import sys; print(sys.path)"
  # cannot do full, e.g. because libxmp is N/A, causes unguarded ERRORs
  #- pip install ".[full]"
  # Resolves crash from python -m coverage xml
  - conda install -c conda-forge sqlite
  - pip install ".[tests]"
  - pip install ".[devel-utils]"
  # fixup
  # ATM datalad does not pull in colorama, which is needed for color output
  # on windows
  - pip install colorama
  - git config --global user.email "test@appveyor.land"
  - git config --global user.name "Appveyor Almighty"

test_script:
  # establish baseline, if annex doesn't work, we are not even trying
  #- git annex test
  # run tests on installed module, not source tree files
  - mkdir __testhome__
  - cd __testhome__
  # report basic info
  - git version
  - git annex version
  # first sign of life
  - datalad wtf
  # perform selected tests for this matrix run
  - python -m nose -s -v -A "not (turtle)" --with-cov --cover-package datalad %TEST_SELECTION%
  # prepare coverage.xml in a separate invocation.  If invoked directly with nose - do not include test_ files themselves
  - python -m coverage xml

after_test:
  - ps: |
      $env:PATH = 'C:\msys64\usr\bin;' + $env:PATH
      Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh
      bash codecov.sh -f "coverage.xml" -U "-s" -A "-s" 

on_finish:
  # enable the next to let the build VM block for up to 60min to log in via RDP and debug
  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
