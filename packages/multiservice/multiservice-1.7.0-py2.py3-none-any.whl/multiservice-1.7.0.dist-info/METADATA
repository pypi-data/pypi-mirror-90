Metadata-Version: 2.1
Name: multiservice
Version: 1.7.0
Summary: Multiservice is a tool to affect multiple repositories simultaneously
Home-page: UNKNOWN
License: UNKNOWN
Author: Viktor Chaptsev
Author-email: viktor@chaptsev.ru
Description-Content-Type: text/markdown
Requires-Dist: typer ; extra == "all"
Requires-Dist: typer-cli ; extra == "all"
Requires-Dist: PyYAML ; extra == "all"
Requires-Dist: rich ; extra == "all"
Requires-Dist: flit ; extra == "dev"
Requires-Dist: isort ; extra == "dev"
Requires-Dist: flake8 ; extra == "dev"
Requires-Dist: flake8-blind-except ; extra == "dev"
Requires-Dist: flake8-broken-line ; extra == "dev"
Requires-Dist: flake8-bugbear ; extra == "dev"
Requires-Dist: flake8-builtins ; extra == "dev"
Requires-Dist: flake8-commas ; extra == "dev"
Requires-Dist: flake8-comprehensions ; extra == "dev"
Requires-Dist: flake8-debugger ; extra == "dev"
Requires-Dist: flake8-eradicate ; extra == "dev"
Requires-Dist: flake8-isort ; extra == "dev"
Requires-Dist: flake8-mock ; extra == "dev"
Requires-Dist: flake8-mutable ; extra == "dev"
Requires-Dist: flake8-pytest ; extra == "dev"
Requires-Dist: flake8-quotes ; extra == "dev"
Requires-Dist: flake8-string-format ; extra == "dev"
Requires-Dist: flake8-variables-names ; extra == "dev"
Provides-Extra: all
Provides-Extra: dev

# Multiservice

Multiservice (`ms`) is a tool to run the same commands on multiple services.

## Install

```console
$ pip install multiservice
```


## Usage

```console
$ multiservice [OPTIONS] COMMAND [SERVICES]...
```

**Options**:

* `-c, --config TEXT`: [default: ~/.multiservice.yml]
* `COMMAND`: [required]: command name from the config
* `[SERVICES]...`: a list of services aliases


**Examples**:

Run a command named `status` on all services:
```console
$ ms status
```

Run a command named `status` on some services:
```console
$ ms status as rs
```

Execute custom script
```console
$ ms execute --execute 'git status && git diff' as rs
```

Edit the config file
```console
$ ms edit
```

## Configuration
Multiservice uses a config file to define commands and services.
Default path is `~/.multiservice.yml`, but you can specify a path using `--config` or `-c` options.

Config example:
```yaml
root: ~/projects/
template: source ./venv/bin/activate && {COMMAND}

editor: vim

# alias: directory
services:
  as: attributes-service
  rs: reports-service

commands:
  status: git status
  reset: git reset origin/develop --hard
  pull: >
    git checkout develop -q &&
    git pull
```

