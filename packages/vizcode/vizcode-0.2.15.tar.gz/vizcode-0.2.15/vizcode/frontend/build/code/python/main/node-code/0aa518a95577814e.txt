def get_articles_csv():    """    Returns the url to a CSV with the article logs    :param: JWT token for a owner    :return: JSON object of url if owner found, Account Not Found otherwise    """    username = get_jwt_identity()    exists = Owner.query.filter_by(username=username).first()    if exists:        sql_query = '''select donations.donation_id, donations.amount_donated, articles.article_link,                               articles.article_title, articles.widget_status, publisher_id                               from donations                               left join articles on donations.newspaper_article_link=articles.article_link where                               articles.publisher_id in                                             (select publisher_id from Owning where owner_id='{}');'''.format(username)        conn = db.engine.connect().connection        df = pd.read_sql(sql_query, conn)        # print(df.head())        all_articles = []        unique_articles = list(df['article_link'].unique())        for i in unique_articles:            temp = df[df.article_link == i]            dic = {}            dic['publisher_name'] = temp['publisher_id'].iloc[0]            dic['article_link'] = i            dic['article_title'] = temp['article_title'].iloc[0]            dic['widget_status'] = bool(temp['widget_status'].iloc[0])            dic['revenue'] = int(temp['amount_donated'].sum())            dic['amount_donations'] = len(temp)            all_articles.append(dic)        df_csv = pd.DataFrame(all_articles)        csv_buffer = StringIO()        df_csv.to_csv(csv_buffer)        filename = username + '_article_logs.csv'        s3.put_object(Bucket='newspark-charity-data', Key=filename, Body=csv_buffer.getvalue())        return jsonify({"url": s3.generate_presigned_url('get_object',                                                         Params={'Bucket': 'newspark-charity-data', 'Key': filename},                                                         ExpiresIn=300)})    else:        return jsonify('Account Not Found')