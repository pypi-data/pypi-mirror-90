def edit_project():    organization_email = get_jwt_identity()    project_id = request.form.get('project_id')    # check if already in database    project = Project.query.filter_by(project_id=project_id).first()    if project:        if organization_email != project.organization_id:            return jsonify("Project does not belong to this account")        project.project_name = request.form.get('project_name')        project.project_short_description = request.form.get('project_short_description')        project.project_description = request.form.get('project_description')        project.project_goal = request.form.get('project_goal')        project.project_city = request.form.get('project_city')        project.project_state = request.form.get('project_state')        project.project_country = request.form.get('project_country')        project.newspaper_id = request.form.get('newspaper_id')        url = ''        # print(request.files)        # Setting up picture upload        if 'project_picture_link' in request.files:            # print("Does it come here")            f = request.files['project_picture_link']            filename_split = secure_filename(f.filename).split('.')            filename = filename_split[0] + str(project_id) + filename_split[1]            s3.put_object(ACL='public-read', Bucket='newspark-charity-data', Key=filename, Body=f)            project.project_picture_link = 'https://newspark-charity-data.s3.amazonaws.com/' + filename            url = 'https://newspark-charity-data.s3.amazonaws.com/' + filename        else:            if 'project_picture_link' in request.form:                project.project_picture_link = request.form.get('project_picture_link')                url = request.form.get('project_picture_link')        db.session.commit()        # Remove the edited versions from the cache        sql_query = '''select article_link from articles where                       project_id1={} or project_id2={} or project_id3={}                       or project_id4={} or project_id5={} or project_id6={};'''.format(project_id, project_id,                                                                                        project_id, project_id,                                                                                        project_id, project_id)        conn = db.engine.connect().connection        df = pd.read_sql(sql_query, conn)        conn.close()        unique_articles = list(df['article_link'].unique())        for i in unique_articles:            if redis.exists(i):                redis.delete(i)        return jsonify("Success")    else:        return jsonify("Initiative Does Not Exist")