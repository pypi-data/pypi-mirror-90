def fund_payment_update():    fund_name = request.form.get('fund_name')    donor_name = request.form.get('name')    donor_email = request.form.get('email')    newspaper_article_link = request.form.get('article_link')    amount_donated = float(request.form.get('amount'))    amount_paid_to_charity = 0.92 * amount_donated  # $9.20    amount_paid_to_publisher = 0.04 * amount_donated  # $0.40    donation_date_time = datetime.now()    # check if fund exists    fund = Fund.query.filter_by(fund_name=fund_name).first()    if fund is None:        return jsonify("Fund Does Not Exist.")    # check if article exists    article = Article.query.filter_by(article_link=newspaper_article_link).first()    if article:        newspaper_id = article.publisher_id        newspaper_article_title = article.article_title    else:        return jsonify("Article Does Not Exist.")    publisher = Publisher.query.filter_by(publisher_name=newspaper_id).first()    if publisher:        publisher.commissions_available += amount_paid_to_publisher        publisher.commissions_raised += amount_paid_to_publisher    else:        return jsonify("Publisher Does Not Exist")    organizations = Organization.query.all()    organization_map = {}    for org in organizations:        organization_map[org.email] = org    # join funds with organizations    fund_relations = Funding.query.all()    organizations_from_fund = []    for f in fund_relations:        organization_id, fund_id = f.organization_id, f.fund_id        if fund_id == fund_name:            if organization_id in organization_map:                org = organization_map[organization_id]                organizations_from_fund.append(org)    if len(organizations_from_fund) == 0:        return jsonify('No organizations in the fund.')    # update amount raised for each org that belongs to the fund and add donation    amount_per_organization = amount_paid_to_charity / len(organizations_from_fund)    for org in organizations_from_fund:        org.total_amount_raised += amount_per_organization        org.funds_available += amount_per_organization        donation = Donation(            organization_id=org.email,            project_id=None,            fund_name=fund_name,            donation_date_time=donation_date_time,            donor_name=donor_name,            donor_email=donor_email,            amount_donated=amount_per_organization,            newspaper_id=newspaper_id,            newspaper_article_title=newspaper_article_title,            newspaper_article_link=newspaper_article_link        )        db.session.add(donation)    db.session.commit()    # send the donor an email    msg = Message()    msg.subject = 'Thank you for Donating!'    msg.html = render_template('payment_funds.html', name=donor_name, amount=float(amount_donated), fund=fund_name)    msg.recipients = [donor_email]    msg.bcc = ["founders@newspark.us"]    msg.sender = "founders@newspark.us"    mail.send(msg)    # subscribe donor to newsletter    url = 'https://us10.api.mailchimp.com/3.0/lists/9f21c018ec/members/'    data = {        "email_address": donor_email,        "status": "subscribed",        "merge_fields": {            "FNAME": donor_name.split(' ')[0],            "LNAME": donor_name.split(' ')[1]        }    }    r = requests.post(url, json=data, auth=('newspark', application.config['MAILCHIMP_API_KEY']))    return jsonify("Success")