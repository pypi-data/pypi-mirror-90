def get_relevant_projects():    """    Gets the projects that were recommended for this article    :param: JWT token for a owner, article link    :return: JSON object of recommended projects    """    username = get_jwt_identity()    owner = Owner.query.filter_by(username=username).first()    if owner:        elements = Owning.query.filter_by(owner_id=username).all()        publisher_names = [e.publisher_id for e in elements]        # print(publisher_names)    else:        return jsonify('Owner does not exist.')    article_link = request.form.get('article_link')    article = Article.query.filter_by(article_link=article_link).first()    # article exists with this link    if article:        article_publisher_name = article.publisher_id        # print(article_publisher_name)    else:        return jsonify('Article does not exist.')    # publisher belonging to article not among publishers belonging to owner    if not (article_publisher_name in publisher_names):        return jsonify('Article does not exist.')    output = []    projects = ['project_id' + str(i) for i in range(1, 7)]    project_info_list = []    for p in projects:        sql_query = '''select *                        from articles, projects, organizations                        where articles.article_link='{}'                        and articles.{}=projects.project_id                        and projects.organization_id=organizations.email                        '''.format(article_link, p)        conn = db.engine.connect().connection        df = pd.read_sql(sql_query, conn)        df.drop(projects + ['password', 'salt'], axis=1, inplace=True)        project_info = list(df.T.to_dict().values())        if len(project_info) != 0:            project_info_list.append(project_info[0])        for i in range(len(project_info)):            project_info[i]['date_published'] = project_info[i]['date_published'].strftime('%m/%d/%Y')    return jsonify(project_info=project_info_list)