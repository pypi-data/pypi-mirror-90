def get_donations_from_publishers():    """    Queries the donations and calculates the cumulative donations that were given to charities featured    on any of the owner's publishing platforms.    :param: request.form params: username    :return: Donations, cumulative donations, and first and last dates that a donation took place    if username is verified, No Account Found otherwise    """    username = get_jwt_identity()    exists = Owner.query.filter_by(username=username).first()    if exists:        sql_query = '''select donation_date_time, newspaper_article_title, newspaper_article_link, amount_donated,                        project_name, organization_name, donations.newspaper_id                        from donations, projects, organizations                        where donations.project_id=projects.project_id                        and donations.organization_id=organizations.email                        and donations.newspaper_id in                         (select publisher_id from Owning where owner_id='{}');'''.format(username)        conn = db.engine.connect().connection        donation_df = pd.read_sql(sql_query, conn)        donation_list = list(donation_df.T.to_dict().values())        donation_df = donation_df[['donation_date_time', 'amount_donated']]        first_date = donation_df['donation_date_time'].min() - timedelta(days=7)        last_date = donation_df['donation_date_time'].max()        cum_sum_df = donation_df.groupby(['donation_date_time']).sum().cumsum()        # create dict of dates with 0 donated for each date        today = datetime.datetime.now()        delta = today - first_date        num_days = delta.days        date_dict = {}        for i in range(num_days + 1):            date = first_date + timedelta(days=i)            # date = date.replace(hour=0, minute=0, second=0, microsecond=0)            date_dict[date.date()] = 0        # fill in values for dict of dates        for i in range(cum_sum_df.shape[0]):            date = cum_sum_df.iloc[i].name            amount_donated = cum_sum_df.iloc[i]['amount_donated']            date_dict[date.date()] = amount_donated        items = [list(i) for i in list(date_dict.items())]        items_sorted = sorted(items, key=lambda x: x[0])        # make sure no values of 0 between donation dates        for i in range(1, len(items_sorted)):            amount_donated = items_sorted[i][1]            if amount_donated == 0:                items_sorted[i][1] = items_sorted[i - 1][1]        # convert items into a list of dicts        items_list_of_dicts = {"labels": [], "values": []}        for item in items_sorted:            date = item[0].strftime('%m/%d/%Y')            amount_donated = int(item[1])            items_list_of_dicts["labels"].append(date)            items_list_of_dicts["values"].append(amount_donated)        # remove time from dates        for i in range(len(donation_list)):            donation_list[i]['donation_date_time'] = donation_list[i]['donation_date_time'].strftime('%m/%d/%Y')        # sort donation list        donation_list = sorted(donation_list, key=lambda x: x["donation_date_time"], reverse=True)        return jsonify(donations=donation_list, cumulative_donations=items_list_of_dicts, \                       first_date=first_date.strftime('%m/%d/%Y'), last_date=last_date.strftime('%m/%d/%Y'))    else:        return jsonify("No Account Found")