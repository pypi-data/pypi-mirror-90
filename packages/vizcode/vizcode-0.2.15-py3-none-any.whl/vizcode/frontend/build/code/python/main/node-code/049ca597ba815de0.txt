def save_article_data(s3_client, article_link, article_title, article_date_time, article_text):    bucket = 'newspark-matching-data'    # bad_chars = ['.', ',', '/']    # new_article_link = str(filter(lambda i: i not in bad_chars, article_link))    file_name = 'article-data/{}.json'.format(article_link)    # calling_file_name = inspect.stack()[-1].filename.split("/")[-1]    # file_path = f'downloads/{file_name}'    # if 'test' in calling_file_name:    #     file_path = f'../downloads/{file_name}'    #    # s3_client.download_file(Bucket=bucket, Key=file_name, Filename=file_path)    article_date_time = str(article_date_time)  # cannot store datetime in json    article_row = {"article_link": article_link, "article_title": article_title,                   "article_date_time": article_date_time, "article_text": article_text}    # s3object = s3_client.get_object(Bucket=bucket, Key=file_name)    s3_client.put_object(Bucket=bucket, Key=file_name, Body=json.dumps(article_row))    # # file is empty    # if os.stat(file_path).st_size == 0:    #     data = {"articles": [article_row]}    #     with open(file_path, 'w') as json_file:    #         json.dump(data, json_file, indent=4)    # with open(file_path, 'r') as json_file:    #     data = json.load(json_file)    #     articles = data['articles']    #     articles.append(article_row)    #    # with open(file_path, 'w') as json_file:    #     json.dump({'articles': articles}, json_file, indent=4)    # s3_client.upload_file(Filename=file_path, Bucket=bucket, Key=file_name)    # os.remove(file_path)    return None