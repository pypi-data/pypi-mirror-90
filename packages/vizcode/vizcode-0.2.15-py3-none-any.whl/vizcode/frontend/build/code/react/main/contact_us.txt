import React from "react";
import Typography from "@material-ui/core/Typography";
import {withStyles} from "@material-ui/core/styles";
import Grid from "@material-ui/core/Grid";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import axios from "axios";
import cookie from "react-cookies";
import $ from "jquery";
import {Redirect} from 'react-router-dom';

const useStyles = theme => ({
  paper: {
      marginTop: theme.spacing(18),
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
  },
  avatar: {
    margin: theme.spacing(1),
    backgroundColor: theme.palette.secondary.main,
  },
  form: {
    width: '100%', // Fix IE 11 issue.
    marginTop: theme.spacing(3),
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
    backgroundColor: "#448AFF",
    color: "#FFFFFF"
  },
  label_style: {
    '&.Mui-focused': {
      color: '#448AFF',
    },
  },
  input_style: {
    '&.MuiOutlinedInput-root': {
      // '& fieldset': {
      //   borderColor: '#448AFF',
      // },
      '&.Mui-focused fieldset': {
        borderColor: '#448AFF',
      },
    },
  },
  helper_style: {
    color: '#FF0000',
  }
});

class ContactUs extends React.Component{

    constructor(props) {
        super(props);
        this.updateInfo = this.updateInfo.bind(this);
        this.handleOnClick = this.handleOnClick.bind(this);
        this.isFormValid = this.isFormValid.bind(this);

        this.state = {
            accessToken: cookie.load('access_token'),
            firstName: '',
            lastName: '',
            email: '',
            message: '',
            validAccessToken: true,
            error_first: "",
            error_last: "",
            error_email: "",
            error_message: "",
            username: "",
        }
    }

    componentDidMount() {

        axios({
            method: 'get',
            url: window.address.concat('get_owner'),
            headers: { Authorization: "Bearer " + this.state.accessToken }
        }).then((response) => {
            let data = response.data.owner;
            this.setState({
                username: data.username,
            });
        });

    }

    updateInfo(event) {
        this.setState({[event.target.name]: event.target.value});
    }

    handleOnClick() {

        // console.log(this.isFormValid());

        if (this.isFormValid()) {
          // console.log("form is valid")

          var data = {
            "first_name": this.state.firstName,
            "last_name": this.state.lastName,
            "email": this.state.email,
            "body": this.state.message,
            "isPublisher": true,
            "primaryID": this.state.username
          }

          $.ajax({
              url: window.address.concat('contact_us'),
              type: 'post',
              data: data,
              headers: {Authorization: 'Bearer ' + this.state.accessToken},
              dataType: 'json',
              success: function (output) {
                window.location.reload(false);
              }.bind(this)
          });
        }

    }

    isFormValid() {

        // let email = this.state.email;
        //
        // if (!(email.includes('@'))) return false;
        //
        // let isValid = (
        //     (this.state.email !== '') &&
        //     (this.state.message !== ''));


        let isValid = true;

        let helperMessage = "Field Required";
        let wrongEmail = "Please provide a valid email";


        if (this.state.firstName == ''){
          this.setState({error_first: helperMessage});
          isValid = false;
        } else {
          this.setState({error_first: ""});
        }


        if (this.state.lastName == ''){
          this.setState({error_last: helperMessage});
          isValid = false;
        } else {
          this.setState({error_last: ""});
        }


        // if (this.state.email == ''){
        //   this.setState({error_email: helperMessage});
        //   isValid = false;
        // } else if (!(this.state.email.includes('@'))) {
        //   this.setState({error_email: wrongEmail});
        //   isValid = false;
        // } else {
        //   this.setState({error_email: ""});
        // }


        // let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;



        let re_mail = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;

        if (this.state.email == ''){
          this.setState({error_email: helperMessage});
          isValid = false;
        } else if(!re_mail.test(this.state.email)){
          this.setState({error_email: wrongEmail});
          isValid = false;
        }else {
          this.setState({error_email: ""});
        }


        if (this.state.message == ''){
          this.setState({error_message: helperMessage});
          isValid = false;
        } else {
          this.setState({error_message: ""});
        }

        return isValid;
    }

    render() {

        const {classes} = this.props;

        return (
            <div className={classes.paper}>
            <Typography component="h1" variant="h5" style={{
                textAlign: "center",
                fontSize: '32px',
                fontFamily: 'Merriweather'}}>
              Contact Us
            </Typography >


            <p style={{fontSize: '16px', fontFamily: 'Lato', textAlign: 'center', paddingLeft: 10, paddingRight: 10}}>
              Send us your inquiry and we will get back to you shortly via email.
            </p>

            <form className={classes.form} noValidate>
              <Grid container spacing={2} justify="center">
                <Grid item sm={5} xs={10}>
                      <TextField
                        required
                        variant="outlined"
                        fullWidth
                        name="firstName"
                        label="First Name"
                        onChange={this.updateInfo}
                        InputLabelProps = {{className: classes.label_style}}
                        InputProps = {{className: classes.input_style}}
                        FormHelperTextProps={{ className: classes.helper_style }}
                        helperText= {this.state.error_first}
                      />
                </Grid>
                <Grid item sm={5} xs={10}>
                      <TextField
                        required
                        variant="outlined"
                        fullWidth
                        name="lastName"
                        label="Last Name"
                        onChange={this.updateInfo}
                        InputLabelProps = {{className: classes.label_style}}
                        InputProps = {{className: classes.input_style}}
                        FormHelperTextProps={{ className: classes.helper_style }}
                        helperText= {this.state.error_last}
                      />
                </Grid>
                <Grid item sm={10} xs={10}>
                      <TextField
                        variant="outlined"
                        fullWidth
                        required
                        value={this.state.email}
                        name="email"
                        label="Email"
                        type="email"
                        onChange={this.updateInfo}
                        InputLabelProps = {{className: classes.label_style}}
                        InputProps = {{className: classes.input_style}}
                        FormHelperTextProps={{ className: classes.helper_style }}
                        helperText= {this.state.error_email}
                      />
                </Grid>
                <Grid item sm={10} xs={10}>
                  <TextField
                    variant="outlined"
                    required
                    fullWidth
                    multiline
                    rows={8}
                    name="message"
                    label="Message"
                    onChange={this.updateInfo}
                    InputLabelProps = {{className: classes.label_style}}
                    InputProps = {{className: classes.input_style}}
                    FormHelperTextProps={{ className: classes.helper_style }}
                    helperText= {this.state.error_message}
                  />
                </Grid>
              </Grid>
              <Grid container justify="center">
                <Grid item sm={3}>
                  <Button
                    fullWidth
                    variant="contained"
                    className={classes.submit}
                    onClick={this.handleOnClick}
                  >
                    SEND
                  </Button>
                </Grid>
              </Grid>
            </form>
          </div>)
    }
}

export default withStyles(useStyles)(ContactUs);