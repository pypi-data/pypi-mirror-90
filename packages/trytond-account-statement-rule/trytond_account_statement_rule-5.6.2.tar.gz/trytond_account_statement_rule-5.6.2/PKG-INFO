Metadata-Version: 1.2
Name: trytond_account_statement_rule
Version: 5.6.2
Summary: Tryton module to automate statement import with rules
Home-page: http://www.tryton.org/
Author: Tryton
Author-email: bugs@tryton.org
License: GPL-3
Download-URL: http://downloads.tryton.org/5.6/
Project-URL: Bug Tracker, https://bugs.tryton.org/
Project-URL: Documentation, https://docs.tryton.org/
Project-URL: Forum, https://www.tryton.org/forum
Project-URL: Source Code, https://hg.tryton.org/modules/account_statement_rule
Description: Account Statement Rule Module
        #############################
        
        The account_statement_rule module allows rules to be defined to complete
        statement lines from imported files.
        When the "Apply Rule" button is clicked on a statement, each rule is tested in
        order against each origin that does not have any lines until one is found that
        matches. Then the rule found is used to create the statement lines linked to
        the origin.
        
        Rule
        ****
        
        A rule is composed of two parts: matching criteria and lines.
        
        Criteria
        --------
        
        The criteria are matched with each origin of the statement:
        
            * Company
            * Journal
            * Amount: Check if the amount is between two values
            * Description: `A regular expression
              <https://docs.python.org/library/re.html#regular-expression-syntax>`_ to
              search for a match in the origin description.
            * Information rules:
        
                * Key: the statement information key on which the rule applies
                * The matching value depending of the type of the key:
        
                    * Boolean
                    * Numeric: A range of value.
                    * Char: A regular expression.
                    * Selection
        
        The regular expression can register the group names `party`, `bank_account` and
        `invoice` which are later used to search for a party and an invoice.
        
        Lines
        -----
        
        They define how to create the statement lines from the matching origin:
        
            * Amount: A Python expression evaluated with:
                * `amount`: the amount of the origin.
                * `pending`: the amount from which previous lines have been deducted.
            * Party
            * Account
        
        If the party is not filled in, one will be searched for using the
        `bank_account` or the `party` group names from the regular expressions.
        If the `invoice` group name appears in a regular expression, it will be used to
        find an invoice to link with.
        
Keywords: tryton statement import rule
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Plugins
Classifier: Framework :: Tryton
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Legal Industry
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Natural Language :: Bulgarian
Classifier: Natural Language :: Catalan
Classifier: Natural Language :: Chinese (Simplified)
Classifier: Natural Language :: Czech
Classifier: Natural Language :: Dutch
Classifier: Natural Language :: English
Classifier: Natural Language :: Finnish
Classifier: Natural Language :: French
Classifier: Natural Language :: German
Classifier: Natural Language :: Hungarian
Classifier: Natural Language :: Indonesian
Classifier: Natural Language :: Italian
Classifier: Natural Language :: Persian
Classifier: Natural Language :: Polish
Classifier: Natural Language :: Portuguese (Brazilian)
Classifier: Natural Language :: Russian
Classifier: Natural Language :: Slovenian
Classifier: Natural Language :: Spanish
Classifier: Natural Language :: Turkish
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Office/Business
Requires-Python: >=3.5
