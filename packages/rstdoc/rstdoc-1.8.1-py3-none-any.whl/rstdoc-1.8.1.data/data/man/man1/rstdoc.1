.\"t
.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "rstdoc" "1" "" "Version 1.8.1" "rstdoc"
.hy
.PP
See background and
documentation (https://rstdoc.readthedocs.io/en/latest/).
.PP
Many companies use
DOCX (http://www.ecma-international.org/publications/standards/Ecma-376.htm)
and thus produce an information barrier.
Working with text is more integrated in the (software) development
process.
A final format can be DOCX, but, at least during development, text is
better.
.PP
Sphinx (http://www.sphinx-doc.org/en/stable/) is an extension of
Docutils (http://docutils.sourceforge.net/) used for many (software)
projects, but it does not support creation of DOCX files, which certain
companies demand.
Pandoc (https://pandoc.org/) does support DOCX, but does not support the
Sphinx extensions, hence \f[C]:ref:\f[R] and the like cannot be used.
.PP
This python package supports working with
RST (http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html)
as documentation format without depending on Sphinx.
.IP \[bu] 2
link RST documents using
substitutions (http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions)
(generated in \f[C]_links_xxx.r?st\f[R])
.IP \[bu] 2
create a \f[C].tags\f[R] file to jump around in an editor that support
ctags (http://ctags.sourceforge.net/FORMAT)
.IP \[bu] 2
RST handling with python: reformat/create RST tables
.IP \[bu] 2
post-process Pandoc\[aq]s conversion from DOCX to RST
.IP \[bu] 2
pre-process Pandoc\[aq]s conversion from RST to DOCX
.IP \[bu] 2
Support in building with WAF (https://github.com/waf-project/waf) (or
\f[C]Makefile\f[R])
.RS 2
.IP \[bu] 2
expand
SimpleTemplate (https://bottlepy.org/docs/dev/stpl.html#simpletemplate-syntax)
template files \f[C].stpl\f[R]
.IP \[bu] 2
graphics files (\f[C].tikz\f[R], \f[C].svg\f[R], \f[C].dot\f[R],
\f[C].uml\f[R], \f[C].eps\f[R] or \f[C].stpl\f[R] thereof, and
\f[C].pyg\f[R]) are converted to \f[C].png\f[R] and placed into
\f[C]./_images\f[R] or \f[C]<updir>/_images\f[R], if there, else into
current directory.
.IP \[bu] 2
a \f[C]gen\f[R] file specifies how RST should be generated from source
code files (see \f[C]dcx.py\f[R])
.RE
.PP
The conventions used are shown
.IP \[bu] 2
by the example produced via \f[C]rstdcx --rest smplfldr\f[R] or
\f[C]rstdcx --stpl smplfldr\f[R]
.IP \[bu] 2
by the documentation sources that can be found at
<https://github.com/rpuntaie/rstdoc/tree/master/doc>
.PP
\f[C]pip install rstdoc\f[R] installs:
.PP
.TS
tab(@);
lw(10.9n) lw(18.2n) lw(40.9n).
T{
Module
T}@T{
CLI Script
T}@T{
Description
T}
_
T{
dcx
T}@T{
rstdcx, rstdoc
T}@T{
create \f[C].tags\f[R], labels and links
T}
T{
fromdocx
T}@T{
rstfromdocx
T}@T{
Convert DOCX to RST using Pandoc
T}
T{
listtable
T}@T{
rstlisttable
T}@T{
Convert RST grid tables to list-tables
T}
T{
untable
T}@T{
rstuntable
T}@T{
Converts certain list-tables to paragraphs
T}
T{
reflow
T}@T{
rstreflow
T}@T{
Reflow paragraphs and tables
T}
T{
reimg
T}@T{
rstreimg
T}@T{
Rename images referenced in the RST file
T}
T{
retable
T}@T{
rstretable
T}@T{
Transforms list tables to grid tables
T}
.TE
.SH rstdcx
.PP
restructuredText sources are split into two types of files: main files
considered by Sphinx, and included files.
Which of \f[C].rest\f[R] or \f[C].rst\f[R] is main or included is
determined by \f[C]source_suffix\f[R] in a \f[C]<root>/conf.py\f[R] or
opposite to the extension of the included \f[C]_links_sphinx.r?st\f[R]
file:
.IP \[bu] 2
if you have \f[C].. include:: /_links_sphinx.rest\f[R], then the main
file extension is \f[C].rst\f[R]
.PP
\f[C]rstdoc\f[R] creates documentation (PDF, HTML, DOCX) from
restructuredText (\f[C].rst\f[R], \f[C].rest\f[R]) using either
.IP \[bu] 2
Pandoc (https://pandoc.org)
.IP \[bu] 2
Sphinx (http://www.sphinx-doc.org)
.IP \[bu] 2
Docutils
configurable (http://docutils.sourceforge.net/docs/user/config.html)
.PP
\f[C]rstdoc\f[R] and \f[C]rstdcx\f[R] command line tools call
\f[C]dcx.py\f[R].
which
.IP \[bu] 2
creates \f[C].tags\f[R] to jump around with the editor
.IP \[bu] 2
handles .stpl (https://bottlepy.org/docs/dev/stpl.html) files
.IP \[bu] 2
processes \f[C]gen\f[R] files (see examples produced by --rest)
.IP \[bu] 2
creates links files (\f[C]_links_docx.r?st\f[R],
\f[C]_links_sphinx.r?st\f[R], ...)
.IP \[bu] 2
forwards known files to either Pandoc, Sphinx or Docutils
.PP
See example at the end of \f[C]dcx.py\f[R].
It is supposed to be used with a build tool.
\f[C]make\f[R] and \f[C]waf\f[R] examples are included.
.IP \[bu] 2
Initialize example tree (add \f[C]--rstrest\f[R] to make \f[C].rst\f[R]
main and \f[C].rest\f[R] included files):
.RS 2
.PP
$ ./dcx.py --rest repo #repo/doc/{sy,ra,sr,dd,tp}.rest files OR $
\&./dcx.py --stpl repo #repo/doc/{sy,ra,sr,dd,tp}.rest.stpl files $
\&./dcx.py --ipdt repo #repo/pdt/AAA/{i,p,d,t}.rest.stpl files $
\&./dcx.py --over repo #.rest all over
.RE
.IP \[bu] 2
Only create .tags and \f[C]_links_xxx.r?st\f[R]:
.RS 2
.IP
.nf
\f[C]
$ cd repo
$ rstdoc
\f[R]
.fi
.RE
.IP \[bu] 2
Create the docs (and .tags and \f[C]_links_xxx.r?st\f[R]) with
\f[B]make\f[R]:
.RS 2
.IP
.nf
\f[C]
$ make html #OR
$ make epub #OR
$ make latex #OR
$ make docx #OR
$ make pdf
\f[R]
.fi
.PP
The latter two are done by Pandoc, the others by Sphinx.
.RE
.IP \[bu] 2
Create the docs (and .tags and \f[C]_links_xxx.r?st\f[R]) with
waf (https://github.com/waf-project/waf):
.RS 2
.PP
Instead of using \f[C]make\f[R] one can load \f[C]dcx.py\f[R]
(\f[C]rstdoc.dcx\f[R]) in waf (https://github.com/waf-project/waf).
\f[C]waf\f[R] also considers all recursively included files, such that a
change in any of them results in a rebuild.
All files can have an additional \f[C].stpl\f[R] extension to use
SimpleTemplate (https://bottlepy.org/docs/dev/stpl.html).
.PP
$ waf configure #also copies the latest version of waf in here $ waf
--docs docx,sphinx_html,rst_odt $ #or you provide --docs during
configure to always compile the docs
.IP \[bu] 2
\f[C]rst_xxx\f[R]: via
rst2xxx.py (http://docutils.sourceforge.net/docs/user/tools.html)
.IP \[bu] 2
\f[C]sphinx_xxx\f[R]: via Sphinx (http://www.sphinx-doc.org) and
.IP \[bu] 2
just \f[C]xxx\f[R]: via Pandoc (https://pandoc.org).
.RE
.PP
The following image language files should be parallel to the
\f[C].r?st\f[R] files.
They are automatically converted to \f[C].png\f[R] and placed into
\f[C]./_images\f[R] or \f[C]<updir>/_images\f[R] or else parallel to the
file.
.IP \[bu] 2
\f[C].tikz\f[R] or \f[C].tikz.stpl\f[R].
This needs LaTex.
.IP \[bu] 2
\&.svg (http://svgpocketguide.com/book/) or \f[C].svg.stpl\f[R]
.IP \[bu] 2
\f[C].dot\f[R] or \f[C].dot.stpl\f[R]
.RS 2
.PP
This needs graphviz (https://graphviz.gitlab.io/gallery/).
.RE
.IP \[bu] 2
\&.uml (http://plantuml.com/command-line) or \f[C].uml.stpl\f[R]
.RS 2
.PP
This needs plantuml (http://plantuml.com/command-line) .
Provide either
.IP \[bu] 2
\f[C]plantuml.bat\f[R] with e.g.
\f[C]java -jar \[dq]%\[ti]dp0plantuml.jar\[dq] %*\f[R] or
.IP \[bu] 2
\f[C]plantuml\f[R] sh script with
\f[C]java -jar \[ga]dirname $BASH_SOURCE\[ga]/plantuml.jar \[dq]$\[at]\[dq]\f[R]
.RE
.IP \[bu] 2
\f[C].eps\f[R] or \f[C].eps.stpl\f[R] embedded postscript files.
.RS 2
.PP
This needs inkscape (https://inkscape.org/en/).
.RE
.IP \[bu] 2
\f[C].pyg\f[R] contains python code that produces a graphic.
If the python code defines a \f[C]to_svg\f[R] or a \f[C]save_to_png\f[R]
function, then that is used, to create a png.
Else the following is tried
.RS 2
.IP \[bu] 2
\f[C]pyx.canvas.canvas\f[R] from the
pyx (http://pyx.sourceforge.net/manual/graphics.html) library or
.IP \[bu] 2
\f[C]cairocffi.Surface\f[R] from
cairocffi (https://cairocffi.readthedocs.io/en/stable/overview.html)
.IP \[bu] 2
matplotlib (https://matplotlib.org).
If \f[C]matplotlib.pyplot.get_fignums()>1\f[R] the figures result in
\f[C]<name><fignum>.png\f[R]
.PP
The same code or the file names can be used in a \f[C].r?st.stpl\f[R]
file with \f[C]pngembed()\f[R] or \f[C]dcx.svgembed()\f[R] to embed in
html output.
.IP
.nf
\f[C]
{{!svgembed(\[dq]egpyx.pyg\[dq],outinfo)}}
<%
ansvg=svgembed(\[aq]\[aq]\[aq]
from svgwrite import cm, mm, drawing
d=drawing.Drawing(viewBox=(\[aq]0 0 300 300\[aq]))
d.add(d.circle(center=(2*cm, 2*cm), r=\[aq]1cm\[aq], stroke=\[aq]blue\[aq], stroke_width=9))
\[aq]\[aq]\[aq].splitlines(),outinfo)
%>
{{!ansvg}}
\f[R]
.fi
.RE
.SS Conventions
.PP
Files
.RS
.IP \[bu] 2
main files and included files: \f[C].rest\f[R], \f[C].rst\f[R] or vice
versa.
\f[C].txt\f[R] are for literally included files (use :literal: option).
.IP \[bu] 2
templates separately rendered : \f[C]*.rest.stpl\f[R] and
\f[C]*.rst.stpl\f[R] template included: \f[C]*.rst.tpl\f[R] Template
lookup is done in \f[C].\f[R] and \f[C]..\f[R] with respect to the
current file.
.RS 2
.IP \[bu] 2
with \f[C]%include(\[aq]some.rst.tpl\[aq], param=\[dq]test\[dq])\f[R]
with optional parameters
.IP \[bu] 2
with \f[C]%globals().update(include(\[aq]utility.rst.tpl\[aq]))\f[R] if
it contains only definitions
.RE
.RE
.PP
Links
.IP \[bu] 2
\f[C].. _\[ga]id\[ga]:\f[R] are \f[I]reST targets\f[R].
reST targets should not be template-generated.
The template files should have a higher or equal number of targets than
the generated file, in order for tags to jump to the template original.
If one wants to generate reST targets, then this should better happen in
a previous step, e.g.
with \f[C]gen\f[R] files mentioned above.
.IP \[bu] 2
References use replacement
substitutions (http://docutils.sourceforge.net/docs/ref/rst/directives.html#replacement-text):
\f[C]|id|\f[R].
.IP \[bu] 2
If you want an overview of the linking (traceability), add
\f[C].. include:: _traceability_file.rst\f[R] to \f[C]index.rest\f[R] or
another \f[C].rest\f[R] parallel to it.
It is there in the example project, to include it in tests.
\f[C]_traceability_file.{svg,png,rst}\f[R] are all in the same
directory.
.PP
Link files are created in link roots, which are folders where the first
main file (\f[C].rest\f[R] or \f[C].rst\f[R]) is encoutered during
depth-first traversal.
Non-overlapping link root paths produce separately linked file sets.
.PP
\f[C].. include:: /_links_sphinx.r?st\f[R], with the one initial
\f[C]/\f[R] instead of a relative or absolute path, will automatically
search upward for the \f[C]_links_xxx.r?st\f[R] file (\f[C]_sphinx\f[R]
is replaced by what is needed by the wanted target when the docs are
generated).
.PP
Sphinx \f[C]conf.py\f[R] is augmented by configuration for Pandoc and
Docutils.
It should be where the input file is, or better at the project root to
be usable with waf (https://github.com/waf-project/waf).
.PP
See the example project created with \f[C]--rest/stpl/ipdt/over\f[R] and
the sources of the documentation of
rstdoc (https://github.com/rpuntaie/rstdoc).
.SS \f[C]rstdcx\f[R] CLI
.PP
Without parameters: creates \f[C]|substitution|\f[R] links and .tags
ctags for reST targets.
.PP
With two or three parameters: process file or dir to out file or dir
through Pandoc, Sphinx, Docutils (third parameter):
.IP \[bu] 2
\f[C]html\f[R], \f[C]docx\f[R], \f[C]odt\f[R], \f[C]pdf\f[R], ...
uses Pandoc.
.IP \[bu] 2
\f[C]rst_html\f[R], \f[C]rst_odt\f[R], \f[C]rst_pdf\f[R], ...
uses
rst2html (http://docutils.sourceforge.net/0.6/docs/user/tools.html), ...
.IP \[bu] 2
\f[C]sphinx_html\f[R], \f[C]sphinx_pdf\f[R], ...
uses Sphinx.
Sphinx provides a nice entry point via the sphinx bootstrap
theme (https://github.com/ryan-roemer/sphinx-bootstrap-theme).
.PP
4th parameter onward become python defines usable in \f[C].stpl\f[R]
files.
.PP
Pdf output needs latex.
Else you can make odt or docx and use
.IP \[bu] 2
win: \f[C]swriter.exe --headless --convert-to pdf Untitled1.odt\f[R]
.IP \[bu] 2
linux: \f[C]lowriter --headless --convert-to pdf Untitled1.odt\f[R]
.PP
Inkscape (.eps, .svg), Dot (.dot), Planuml (.uml), latex (.tex,.tikz)
are converted to .png into \f[C]./_images\f[R] or
\f[C]<updir>/_images\f[R] or \[aq].\[aq].
Any of the files can be a SimpleTemplate template (xxx.yyy.stpl).
.PP
Configuration is in \f[C]conf.py\f[R] or \f[C]../conf.py\f[R].
.PP
\f[C]rstdoc --stpl|--rest|--ipdt|-over\f[R] create sample project trees.
.PP
\f[C]--stpl\f[R] with \f[C].rest.stpl\f[R] template files,
\f[C]--rest\f[R] with only a doc folder with \f[C].rest\f[R] files,
\f[C]--ipdt\f[R] with inform-plan-do-test enhancement cycles
\f[C]--over\f[R] with \f[C].rest\f[R] files all over the project tree
including symbolic links
.SS Examples
.PP
Example folders (see wscript and Makefile there):
.IP
.nf
\f[C]
rstdoc --rest <folder> [--rstrest]
rstdoc --stpl <folder> [--rstrest]
rstdoc --ipdt <folder> [--rstrest]
rstdoc --over <folder> [--rstrest]
\f[R]
.fi
.PP
Use \f[C]--rstrest\f[R] to produce \f[C].rst\f[R] for the main file, as
\f[C].rest\f[R] is not recognized by github/gitlab, who also don\[aq]t
support file inclusion, so no need for two extension anyway.
.PP
Examples usages with the files generated by \f[C]rstdoc --stpl tmp\f[R]:
.IP
.nf
\f[C]
cd tmp/doc
rstdcx   #expand .stpl and produce .tag and _links_xxx files

#expand stpl and append substitutions (for simple expansion use \[ga]\[ga]stpl <file> .\[ga]\[ga])
rstdcx dd.rest.stpl - rest           # expand to stdout, appending dd.html substitutions, to pipe to Pandoc
rstdcx dd.rest.stpl - html.          # as before
rstdcx dd.rest.stpl - docx.          # expand to stdout, appending dd.docx substitutions, to pipe to Pandoc
rstdcx dd.rest.stpl - newname.docx.  # expand template, appending substitutions for target newname.docx
rstdcx dd.rest.stpl - html           # expand to stdout, already process through Pandoc to produce html on stdout
rstdcx dd.rest.stpl                  # as before
rstdcx sy.rest.stpl - rst_html       # expand template, already process through Docutils to produce html on stdout
stpl sy.rest.stpl | rstdcx - - sy.html. # appending sy.html substitutions, e.g. to pipe to Pandoc
stpl dd.rest.stpl | rstdcx - - dd.html  # appending tp.html substitutions and produce html on stdout via Pandoc
rstdcx dd.rest.stpl dd.rest          # expand into dd.rest, appending substitutions for target dd.html
rstdcx dd.rest.stpl dd.html html     # expand template, process through Pandoc to produce dd.html
rstdcx dd.rest.stpl dd.html          # as before
rstdcx dd.rest.stpl dd.html rst_html # expand template, already process through Docutils to produce dd.html
rstdcx dd.rest.stpl dd.docx          # expand template, process through Pandoc to produce dd.docx
rstdcx dd.rest.stpl dd.odt pandoc    # expand template, process through Pandoc to produce dd.odt
rstdcx dd.rest.stpl dd.odt           # as before
rstdcx dd.rest.stpl dd.odt rst_odt   # expand template, process through Docutils to produce dd.odt
rstdcx dd.rest.stpl dd.odt rst       # as before
rstdcx . build html                  # convert current dir to build output dir using pandoc
rstdcx . build sphinx_html           # ... using sphinx (if no index.rest, every file separately)

#Sphinx is not file-oriented
#but with rstdcx you need to provide the files to give Sphinx \[ga]\[ga]master_doc\[ga]\[ga] (normally: index.rest)
#Directly from \[ga]\[ga].stpl\[ga]\[ga] does not work with Sphinx
rstdcx index.rest ../build/index.html sphinx_html   # via Sphinx the output directory must be different

#convert the graphics and place the into _images or <updir>/_images
#if no _images directory exists they will be placed into the same directory
rstdcx egcairo.pyg
rstdcx egdot.dot.stpl
rstdcx egeps.eps
rstdcx egother.pyg
rstdcx egplt.pyg
rstdcx egpygal.pyg
rstdcx egpyx.pyg
rstdcx egsvg.svg.stpl
rstdcx egtikz.tikz
rstdcx egtikz1.tikz
rstdcx eguml.uml

#Convert graphics to a png (even if _images directory exists):
rstdcx eguml.uml eguml.png

#Files to other files:

rstdoc dd.rest.stpl dd.rest
rstdoc dd.rest.stpl dd.html html
rstdoc dd.rest.stpl dd.html
rstdoc sr.rest.stpl sr.html rst_html
rstdoc dd.rest.stpl dd.docx
rstdoc dd.rest.stpl dd.odt pandoc
rstdoc dd.rest.stpl dd.odt
rstdoc sr.rest.stpl sr.odt rst_odt
rstdoc sr.rest.stpl sr.odt rst
rstdoc index.rest build/index.html sphinx_html

#Directories to other directories with out info:

rstdoc . build html
rstdoc . build sphinx_html
\f[R]
.fi
.PP
Grep with python re in .py, .rst, .rest, .stpl, .tpl:
.IP
.nf
\f[C]
rstdoc --pygrep inline
\f[R]
.fi
.PP
Grep for keyword lines containing \[aq]png\[aq]:
.IP
.nf
\f[C]
rstdoc --kw png
\f[R]
.fi
.PP
Default keyword lines:
.IP
.nf
\f[C]
\&.. {{{kw1,kw2
\&.. {kw1,kw2}
{{_ID3(\[aq]kw1 kw2\[aq])}}
%__ID3(\[aq]kw1 kw2\[aq])
:ID3: kw1 kw2
\f[R]
.fi
.SH rstfromdocx
.PP
rstfromdocx: shell command
.PD 0
.P
.PD
fromdocx: rstdoc module
.PP
Convert DOCX to RST in a subfolder of current dir, named after the DOCX
file.
It also creates \f[C]conf.py\f[R], \f[C]index.py\f[R] and
\f[C]Makefile\f[R] and copies \f[C]dcx.py\f[R] into the folder.
.PP
See rstdcx (file:#rstdcx) for format conventions for the RST.
.PP
There are options to post-process through:
.IP
.nf
\f[C]
--listtable (--join can be provided)
--untable
--reflow (--sentence True,  --join 0)
--reimg
\f[R]
.fi
.PP
\f[C]rstfromdocx -lurg\f[R] combines all of these.
.PP
To convert more DOCX documents into the same RST documentation folder,
proceed like this:
.IP \[bu] 2
rename/copy the original DOCX to the name you want for the
\f[C].rest\f[R] file
.IP \[bu] 2
run \f[C]rstfromdocx -lurg doc1.docx\f[R]; instead of -lurg use your own
options
.IP \[bu] 2
check the output in the \f[C]doc1\f[R] subfolder
.IP \[bu] 2
repeat the previous 2 steps with the next DOCX files
.IP \[bu] 2
create a new folder, e.g.
\f[C]doc\f[R]
.IP \[bu] 2
merge all other folders into that new folder
.PP
\f[C]fromdocx.docx_rst_5\f[R] creates 5 different rst files with
different postprocessing.
.PP
See rstreflow (file:#rstreflow) for an alternative proceeding.
.SH rstlisttable
.PP
rstlisttable: shell command
.PD 0
.P
.PD
listable: rstdoc module
.PP
Convert RST grid tables to list-tables.
.IP "1." 3
Convert grid tables in a file to list-tables.
The result is output to stdout:
.RS 4
.IP
.nf
\f[C]
$ listtable.py input.rst
\f[R]
.fi
.RE
.IP "2." 3
Convert several files:
.RS 4
.IP
.nf
\f[C]
$ listtable.py input1.rst input2.rst
$ listtable.py *.rst
\f[R]
.fi
.RE
.IP "3." 3
Use pipe (but \f[C]cat\f[R] might not keep the encoding):
.RS 4
.IP
.nf
\f[C]
$ cat in.rst | listtable.py -  | untable.py - > out.rst
\f[R]
.fi
.RE
.SS Options
.PP
-j, --join e.g.002.
Join method per column: 0=\[dq]\[dq].join; 1=\[dq] \[dq].join;
2=\[dq]\[rs]n\[dq].join
.SH rstuntable
.PP
rstuntable: shell command
.PD 0
.P
.PD
untable: rstdoc module
.PP
Convert tables of following format to paragraphs with an ID.
The \[aq]-\[aq] in ID is removed and the ID is made lower case.
\f[B]Bold\f[R] is removed.
.PP
.TS
tab(@);
lw(35.0n) lw(35.0n).
T{
\f[B]ID-XY-00\f[R]
T}@T{
text goes here
T}
T{
\f[B]ID-XY-01\f[R]
T}@T{
text again goes here
T}
.TE
.PP
If the first entry does contain no word chars or spaces between words,
then the table stays.
For a different behavior replace paragraph23.
.PP
A file produced from a docx using pandoc or \f[C]fromdocx.py\f[R] will
need a pre-processing via \f[C]rstlisttable\f[R] to convert grid tables
to \f[C]list-table\f[R] tables.
This is done in one step with \f[C]rstfromdocx -lu doc.rst\f[R].
.SH rstreflow
.PP
rstreflow: shell command
.PD 0
.P
.PD
reflow: rstdoc module
.PP
Reflow tables and paragraphs in a rst document produced from a docx.
.PP
Post-process a docx in this order:
.IP
.nf
\f[C]
rstfromdocx doc.docx
rstlisttable doc/doc.rst > doc/tmp.rst
rstuntable doc/tmp.rst > doc/tmp1.rst
rstreflow doc/tmp1.rst > doc/tmp2.rst
rstreimg doc/tmp2.rst > doc/tmp3.rst
rm doc/doc.rst
mv doc/tmp3.rst doc/doc.rst
rm doc/tmp*
\f[R]
.fi
.PP
Check the intermediate results.
.PP
Else one can also do inplace:
.IP
.nf
\f[C]
rstfromdocx doc.docx
rstlisttable -i doc/doc.rst
rstuntable -i doc/doc.rst
rstreflow -i doc/doc.rst
rstreimg -i doc/doc.rst
\f[R]
.fi
.PP
Note
.PP
DOCX to RST using Pandoc
.PP
\f[C]rstfromdocx -lurg doc.rst\f[R] converts a docx to RST and does all
the post-processing in one step.
.PP
It is adviced, though, to compare the output with the original and do
some manual corrections here and there.
.SH rstreimg
.PP
rstreimg: shell command
.PD 0
.P
.PD
reimg: rstdoc module
.PP
Reimg renames the images in the rst file and the files themselves.
It uses part of the document name and a number as new names.
.PP
This is useful, if more RST documents converted from DOCX should be
combined in one directory and the names of the images have no meaning
(image13,...).
.SH rstretable
.PP
rstretable: shell command
.PD 0
.P
.PD
retable: rstdoc module
.PP
Transforms list tables to grid tables.
.PP
This file also contains the code from the Vim plugin
vim-rst-tables-py3 (https://github.com/ossobv/vim-rst-tables-py3), plus
some little fixes.
\f[C]rstdoc\f[R] is used by the Vim plugin
vim_py3_rst (https://github.com/rpuntaie/vim_py3_rst) , which replaces
vim-rst-tables-py3 (https://github.com/ossobv/vim-rst-tables-py3).
