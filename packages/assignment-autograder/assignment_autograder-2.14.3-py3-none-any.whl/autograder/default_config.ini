# If any of these fields are missing in your config, then this config's
# fields replace them automatically

[CONFIG]
# Student's program is terminated if it takes more than this time in seconds
# The format is: testcase_name:timeout, testcase_name2:timeout2, ALL:default_timeout_for_all_testcases
# (ALL field is not required)
TIMEOUT = ALL:1
# Generate results directory with a result file per student
GENERATE_RESULTS = true
# Total points given for tests. I.e. The final score is out of 100 by default
TOTAL_POINTS_POSSIBLE = 100
# Specifies the programming language of student submissions and of testcases
# AUTO means that we discover the language using the extensions of testcases
# You can find the possible language names in autograder/grader.py file
PROGRAMMING_LANGUAGE = AUTO
# For display in the output for the student
ASSIGNMENT_NAME = Homework
# A list of strings separated by a comma. At least one of them must be in each submission source file stem.
# (file stem is the entire name except for suffix)
# AUTO means that we grade all source files in the directory
POSSIBLE_SOURCE_FILE_STEMS = AUTO
# If true, the names of student submissions are compared to POSSIBLE_SOURCE_FILE_STEMS case insensitively.
# I.e. If a student wrote homework2, and the required name is Homework2 (and vice versa),
# autograder will still grade this homework if set to true.
SOURCE_FILE_NAME_IS_CASE_INSENSITIVE = false
# A comma separated list of testcase_filename:maximum_result_percentage values.
# Use ALL if you want to set a default maximum score for all testcases
# A specific testcase result will take priority over ALL
# (i.e. if you put 'ALL:1, some_testcase.c:0.5', then some_testcase will
#  have a maximum score of 50)
TESTCASE_WEIGHTS =

# This setting will do two things:

# Precompile testcases to hide their files from student. This will ensure the student
# won't be able to parse the files and read the exit codes during grading.

# Make grader remove all testcase source files from working directory before running executables so that the
# student has no way of parsing testcases to get validation strings. If there are too many testcases or the testcases
# are VERY large, this could slow down grading or even cause memory-related errors
# (but I doubt that will ever be a case)
ANTI_CHEAT = true

# If true, grades multiple submissions at once.
# Greatly speeds up grading but can be slightly less safe because some students might attempt
# to access the testcases/submissions of other students but the danger here is rather small.
PARALLEL_GRADING_ENABLED = true

# if true, looks for multifile submissions as well as regular submissions and grades multifile
# submissions using inputs/outputs only. In order for multifile submissions to work, POSSIBLE_POSSIBLE_SOURCE_FILE_STEMSS
# must contain all possible name stems of executables generated by makefile.
# (multifile submission is a directory that contains source code and makefile)
MULTIFILE_SUBMISSIONS_ENABLED = false

# Extra arguments to be passed with each submission/testcase during compilation/precompilation
# The style is: testcase_name:command line --args -here, ALL:--more cli args
# ALL means that we apply these arguments to all testcases/submissions

SUBMISSION_PRECOMPILATION_ARGS =

# Only works if ANTI_CHEAT = true
TESTCASE_PRECOMPILATION_ARGS =

TESTCASE_COMPILATION_ARGS =


# TODO: Remove PROGRAMMING_LANGUAGE
# TODO: Add    RUNTIME_ARGS