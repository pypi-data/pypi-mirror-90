# -*- coding: utf-8 -*-
from setuptools import setup

modules = \
['aws_assume_role_lib']
install_requires = \
['boto3>=1.13.0,<2.0.0']

setup_kwargs = {
    'name': 'aws-assume-role-lib',
    'version': '1.3.0',
    'description': 'Assumed role session chaining (with credential refreshing) for boto3',
    'long_description': '# aws-assume-role-lib\n**Assumed role session chaining (with credential refreshing) for boto3**\n\nThe typical way to use boto3 when programmatically assuming a role is to explicitly call [`sts.AssumeRole`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html#STS.Client.assume_role) and use the returned credentials to create a new [`boto3.Session`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html).\nHowever, these credentials expire, and the code must explicitly handle this situation (e.g., in a Lambda function, calling `AssumeRole` in every invocation).\n\nWith `aws-assume-role-lib`, you can easily create assumed role sessions from parent sessions that automatically refresh expired credentials.\n\nIn a Lambda function that needs to assume a role, you can create the assumed role session during initialization and use it for the lifetime of the execution environment.\n\nNote that in `~/.aws/config`, [you have the option to have profiles that assume a role based on another profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html), and this automatically handles refreshing expired credentials as well.\n\n# Installation\n\n```bash\npip install --user aws-assume-role-lib\n```\n\nOr just add [`aws_assume_role_lib.py`](https://raw.githubusercontent.com/benkehoe/aws-assume-role-lib/main/aws_assume_role_lib.py) to your project.\n\n# Usage\n\n```python\nimport boto3\nfrom aws_assume_role_lib import assume_role\n\n# Get a session\nsession = boto3.Session()\n# or with a profile:\n# session = boto3.Session(profile_name="my-profile")\n\n# Assume the session\nassumed_role_session = assume_role(session, "arn:aws:iam::123456789012:role/MyRole")\n\nprint(assumed_role_session.client("sts").get_caller_identity()["Arn"])\n```\n\nIn Lambda, initialize the sessions outside the handler:\n```python\nimport os\nimport boto3\nfrom aws_assume_role_lib import assume_role, generate_lambda_session_name\n\n# Get the Lambda session\nSESSION = boto3.Session()\n\n# Get the config\nROLE_ARN = os.environ["ROLE_ARN"]\nROLE_SESSION_NAME = generate_lambda_session_name() # see below for details\n\n# Assume the session\nASSUMED_ROLE_SESSION = assume_role(SESSION, ROLE_ARN, RoleSessionName=ROLE_SESSION_NAME)\n\ndef handler(event, context):\n    # do stuff with the Lambda role using SESSION\n    print(SESSION.client("sts").get_caller_identity()["Arn"])\n\n    # do stuff with the assumed role using ASSUMED_ROLE_SESSION\n    print(ASSUMED_ROLE_SESSION.client("sts").get_caller_identity()["Arn"])\n```\n\n# Interface\n\n```\nassume_role(\n    # required arguments\n    session:           boto3.Session,\n    RoleArn:           str,\n\n    *,\n    # keyword-only arguments for AssumeRole\n    RoleSessionName:   str                            = None,\n    PolicyArns:        list[dict[str, str]]           = None,\n    Policy:            Union[str, dict]               = None,\n    DurationSeconds:   Union[int, datetime.timedelta] = None,\n    Tags:              list[dict[str, str]]           = None,\n    TransitiveTagKeys: list[str]                      = None,\n    ExternalId:        str                            = None,\n    SerialNumber:      str                            = None,\n    TokenCode:         str                            = None,\n    additional_kwargs: dict                           = None,\n\n    # keyword-only arguments for returned session\n    region_name:       Union[str, bool]               = None,\n\n    # keyword-only arguments for assume_role() itself\n    validate:          bool                           = True,\n    cache:             dict                           = None,\n)\n```\n\n`assume_role()` takes a session and a role ARN, and optionally [other keyword arguments for `sts.AssumeRole`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html#STS.Client.assume_role).\nUnlike the `AssumeRole` API call itself, `RoleArn` is required, but `RoleSessionName` is not; it\'s automatically generated if one is not provided.\n\nNote that unlike the boto3 sts client method, you can provide the `Policy` parameter (the [inline session policy](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session)) as a `dict` rather than a serialized JSON string, and `DurationSeconds` as a `datetime.timedelta` rather than an integer.\n\nBy default, the session returned by `assume_role()` uses the same region configuration as the input session.\nIf you would like to set the region explicitly, pass it in the `region_name` parameter.\n\nNote that if the parent session was created without a region passed in to the `Session` constructor, it has an implicit region, based on searching potential configuration locations.\nThis means that the region used by the session can change (for example, if you set `os.environ["AWS_DEFAULT_REGION"]` to a different value).\nBy default, if the parent session has an implicit region, the child session has an implicit region, and they would both change.\nIf the parent session has an implicit region, and you would like to fix the child session region to be explicitly the current value, pass `region_name=True`.\nIf, for some reason, you have an explicit region set on the parent, and want the child to have implicit region config, pass `region_name=False`.\n\nBy default, `assume_role()` checks if the parameters are invalid.\nWithout this validation, errors for these issues are more confusingly raised when the child session is first used to make an API call (boto3 does make the call to retrieve credentials until they are needed).\nHowever, this incurs a small time penalty, so parameter validation can be disabled by passing `validate=False`.\n\nIf any new arguments are added to `AssumeRole` in the future, they can be passed in via the `additional_kwargs` argument.\n\nThe parent session is available on the child session in the `assume_role_parent_session` property.\nNote this property is added by this library; ordinary boto3 sessions do not have it.\n\n# Patching boto3\n\nYou can make the `assume_role()` function available directly in boto3 by calling `patch_boto3()`.\nThis creates a `boto3.assume_role(RoleArn, ...)` function (note that it does not take a session, it uses the same default session as `boto3.client()`), and adds a `boto3.Session.assume_role()` method.\nSo usage for that looks like:\n\n```python\nimport boto3\nimport aws_assume_role_lib\naws_assume_role_lib.patch_boto3()\n\n# basically equivalent to:\n# assume_role(boto3.Session(), "arn:aws:iam::123456789012:role/MyRole")\nassumed_role_session = boto3.assume_role("arn:aws:iam::123456789012:role/MyRole")\n\nsession = boto3.Session(profile_name="my-profile")\nassumed_role_session = session.assume_role("arn:aws:iam::123456789012:role/MyRole")\n```\n\n# Role session names for Lambda functions\nIf you don\'t provide a role session name, the underlying `botocore` library [generates one using a timestamp](https://github.com/boto/botocore/blob/c53072ec257ef47e2fc749c384a9488fd3f3e626/botocore/credentials.py#L730).\nThat\'s the best it can do, because it doesn\'t have any other context.\n\nBut in a Lambda function, we do have additional context, the Lambda function itself.\nIf you call the `generate_lambda_session_name()` function inside an instance of a Lambda function, it returns a session name that corresponds to the function instance.\nThe purpose of this is to simplify tracing usage of the session back to the function instance.\n\nIf the version is `$LATEST`, the returned value is has the format `{function_name}.{identifier}`, otherwise it has the format `{function_name}.{function_version}.{identifier}`.\nThe identifier is the function instance\'s unique ID extracted from the CloudWatch log stream name; if this fails for any reason, it\'s a timestamp instead.\nYou can override any of the values by providing them as arguments to the function.\n\n# Caching\n\nIf you would like to cache the credentials on the file system, you can use the `JSONFileCache` class, which will create files under the directory you provide in the constructor (which it will create if it doesn\'t exist).\nUse it like:\n```python\nassumed_role_session = assume_role(session, "arn:aws:iam::123456789012:role/MyRole", cache=JSONFileCache("path/to/dir"))\n```\nYou can also use any `dict`-like object for the cache (supporting `__getitem__`/`__setitem__`/`__contains__`).\n',
    'author': 'Ben Kehoe',
    'author_email': 'ben@kehoe.io',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/benkehoe/aws-assume-role-lib',
    'py_modules': modules,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
