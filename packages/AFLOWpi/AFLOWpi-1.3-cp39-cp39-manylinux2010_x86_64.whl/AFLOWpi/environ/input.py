import AFLOWpi
import shutil
import json
import os
import logging
from copy import deepcopy

class EnvironFile():
	# TODO change defaults to something more general
	# TODO consider changing to a dictionary
	def __init__(self):
		self.environ_data = {}
		self.set_defaults()
		## EXTERNAL_CHARGES (ignore for now)
		## DIELECTRIC_REGIONS (ignore for now)

	def sanity_check(self, mode):
		pass
		# TODO add sanity checks to make sure input is fine before writing environ.in file
	
	def update_environ_data(self, keypath, val):
		k1 = keypath.split('/')[0].upper()
		k2 = keypath.split('/')[1].lower()
		self.environ_data[k1][k2] = val

	def set_defaults(self):
		self.environ_data = deepcopy(AFLOWpi.environ.environ_default)

	def set_interface_mode(self, interface):
		# TODO, remove a lot of the assumptions that don't have anything to do with the interface
		if interface == 'electronic':
			self.environ_data['&ENVIRON']['solvent_mode'] = 'electronic'
			self.environ_data['&BOUNDARY']['stype'] = 2
		elif interface == 'ionic':
			self.environ_data['&ENVIRON']['env_electrostatic'] = True
			#self.environ_data['&BOUNDARY']['radius_mode'] = 'muff'
			self.environ_data['&BOUNDARY']['solvent_mode'] = 'ionic'
			#self.environ_data['&BOUNDARY']['boundary_core'] = 'lowmem'
			self.environ_data['&ELECTROSTATIC']['pbc_correction'] = 'parabolic'
			self.environ_data['&ELECTROSTATIC']['pbc_dim'] = 0
			self.environ_data['&ELECTROSTATIC']['tol'] = 1e-10
		elif interface == 'fa-ionic':
			self.environ_data['&ENVIRON']['env_surface_tension'] = 50.0
			self.environ_data['&ENVIRON']['env_pressure'] = -0.35
			self.environ_data['&ENVIRON']['env_static_permittivity'] = 78.3
			self.environ_data['&ENVIRON']['environ_type'] = 'input'
			self.environ_data['&ENVIRON']['env_electrostatic'] = True
			self.environ_data['&BOUNDARY']['radius_mode'] = 'muff' # seems like uff is not a good idea
			self.environ_data['&BOUNDARY']['solvent_mode'] = 'fa-ionic'
			self.environ_data['&BOUNDARY']['boundary_core'] = 'lowmem'
			self.environ_data['&BOUNDARY']['alpha'] = 1.12
			self.environ_data['&BOUNDARY']['field_awareness'] = 0.12
			self.environ_data['&BOUNDARY']['charge_asymmetry'] = -0.354
			self.environ_data['&BOUNDARY']['field_min'] = 2.0
			self.environ_data['&BOUNDARY']['field_max'] = 3.0
			self.environ_data['&ELECTROSTATIC']['pbc_correction'] = 'parabolic'
			self.environ_data['&ELECTROSTATIC']['pbc_dim'] = 0
			self.environ_data['&ELECTROSTATIC']['tol'] = 1e-10

	def set_solvent_mode(self, solvent):
		if solvent == 'vacuum':
			self.environ_data['&ENVIRON']['environ_type'] = 'input'
			self.environ_data['&ENVIRON']['env_surface_tension'] = 0.0
			self.environ_data['&ENVIRON']['env_pressure'] = 0.0
			self.environ_data['&ENVIRON']['env_static_permittivity'] = 1.0
		elif solvent == 'water':
			self.environ_data['&ENVIRON']['environ_type'] = 'input'
			self.environ_data['&ENVIRON']['env_surface_tension'] = 50.0
			self.environ_data['&ENVIRON']['env_pressure'] = -0.35
			self.environ_data['&ENVIRON']['env_static_permittivity'] = 78.3

		s = self.environ_data['&BOUNDARY']['solvent_mode']
		if s == 'ionic' or s == 'fa-ionic':
			self.environ_data['&BOUNDARY']['alpha'] = 1.12
		elif s == 'electronic' or s == 'fa-electronic':
			self.environ_data['&BOUNDARY']['rhomin'] = 1e-4
			self.environ_data['&BOUNDARY']['rhomax'] = 5e-3

	def set_diffuse_mode(self, diffuse):
		if diffuse == '3d':
			self.environ_data['&ENVIRON']['diffuse_layer'] = True
			self.environ_data['&ENVIRON']['env_electrolyte_ntyp'] = 2
			self.environ_data['&ENVIRON']['zion'] = [1, -1]
			self.environ_data['&ENVIRON']['cion'] = [1.0, 1.0]
			self.environ_data['&ENVIRON']['cionmax'] = 10.0
			self.environ_data['&ENVIRON']['temperature'] = 300.0
			self.environ_data['&BOUNDARY']['electrolyte_mode'] = 'electronic'
			self.environ_data['&ELECTROSTATIC']['pbc_correction'] = 'parabolic'
			self.environ_data['&ELECTROSTATIC']['pbc_dim'] = 0
			self.environ_data['&ELECTROSTATIC']['pbc_axis'] = 3
			self.environ_data['&ELECTROSTATIC']['tol'] = 5e-13
			self.environ_data['&ELECTROSTATIC']['inner_tol'] = 5e-18

	def write_file(self, filepath, indent=2):
		s = ' ' * indent
		output = "!! This file has been automatically generated by AFLOWPI\n"
		for key, nml in self.environ_data.items():
			output += "{}\n".format(key)
			# TODO handle external_charges and dielectric regions
			for label, value in nml.items():
				default = AFLOWpi.environ.environ_default[key]
				if label in default and value != default[label]:
					if type(value) == list:
						for i, element in enumerate(value):
							output += "{}{}({}) = {}\n".format(s, label, i+1, element)
					elif type(value) == str:
						output += "{}{} = '{}'\n".format(s, label, value)
					else:
						output += "{}{} = {}\n".format(s, label, value)
			output += "/\n"
		with open(filepath, 'w') as f:
			f.write(output)

	def edit(self, keypath, val):
		self.update_environ_data(keypath, val)

def get_environ_input(oneCalc, mode, wdir=None, **kwargs):
	if mode == 'from_file':
		# try and see if there is an existing environ file and if so copy
		# otherwise, load default. Read in environ_config to check if
		# any deviations in settings have been declared
		try:
			shutil.copy(wdir + 'environ.in', os.getcwd() + '/' + 'environ.in')
		except FileNotFoundError:
			get_environ_input(oneCalc, 'from_config', wdir)

	elif mode == 'from_config':
		if "_AFLOW_ENVIRON_" in oneCalc:
			config = oneCalc["_AFLOW_ENVIRON_"]
			print("CONFIG", config)

			# read dictionary and parse contents into a template environ file
			environ_file = EnvironFile()
			if "interface" in config:
				environ_file.set_interface_mode(config["interface"])
			if "solvent" in config:
				environ_file.set_solvent_mode(config["solvent"])
			if "diffuse" in config:
				environ_file.set_diffuse_mode(config["diffuse"])
			# edit depending on config file
			if 'edit' in config and config['edit']:
				for edit in config['edit']:
					# BROKE THIS, TODO fix
					environ_file.edit(edit[0], edit[1])
		else:
			logging.warning("oneCalc does not contain an _AFLOW_ENVIRON_ entry")
			get_environ_input(oneCalc, 'default', wdir)
			return

		if not kwargs:
			# no loop, just write the environ file
			environ_file.write_file(os.getcwd() + '/' + 'environ.in')
			return

		if 'loopval' in kwargs and 'loopparam' in kwargs:
			# part of a loop, thus do a substitution based on the param fed in
			print('updating')
			environ_file.update_environ_data(kwargs['loopparam'], kwargs['loopval'])
			environ_file.write_file(os.getcwd() + '/' + 'ENVIRON_{:02d}'.format(kwargs['loopidx']+1))
		environ_file.write_file(os.getcwd() + '/' + 'environ.in')
	
	elif mode == 'default':
		environ_file = EnvironFile()
		environ_file.write_file(os.getcwd() + '/' + 'environ.in')

if __name__ == '__main__':
	e = EnvironFile()
	e.set_interface_mode("ionic")
	e.set_solvent_mode("water")
	e.set_diffuse_mode("3d")
	import pprint
	pprint.pprint(e.environ_data)
	e.write_file('environ.in')

