import AFLOWpi
import numpy as np
import re
import subprocess
import os 


def _parse_edata(edata_out):

    ed_str=edata_out
    
    try:
       hm_str=re.findall("Space group label.*=\s*(.*)\n",ed_str)[0].strip()
    except Exception as e:
       print("!!")
       return ""

    try:
       str_out_sp=re.findall("WYCCAR.*\n.*\n.*\n(.*)\n",ed_str)[0].split(" ")
    except Exception as e:
       print(e)
       return ""

    str_out_sp = [x for x in str_out_sp if len(x.strip())!=0]
    lst_out_sp = list(map(float,str_out_sp))

    temp=[hm_str,int(lst_out_sp.pop())]
    temp.extend(lst_out_sp)

    cif_str="""# CIF file
# This file was generated by FINDSYM AFLOW
data_findsym-output
_audit_creation_method FINDSYM
_symmetry_space_group_name_H-M "%s"
_symmetry_Int_Tables_number %s
_cell_length_a    % 10.8f
_cell_length_b    % 10.8f
_cell_length_c    % 10.8f
_cell_angle_alpha % 10.8f
_cell_angle_beta  % 10.8f
_cell_angle_gamma % 10.8f
_space_group_symop_id
_space_group_symop_operation_xyz
"""%tuple(temp)

    try:
        sym_wyc=re.findall("General Wyckoff position.*\n((.*\n)*)\s*Representative Wyckoff positions",ed_str)[0][0]
    except:
        return ""

    sym_wyc = "\n".join([x.lstrip() for x in  sym_wyc.split("\n")])

    cif_str+=sym_wyc

    cif_str+="""loop_
_atom_site_label
_atom_site_type_symbol
_atom_site_symmetry_multiplicity
_atom_site_Wyckoff_label
_atom_site_fract_x
_atom_site_fract_y
_atom_site_fract_z
_atom_site_occupancy"""

    try:
        pos_info_str=re.findall("Representative Wyckoff positions.*\n((.*\n)*)\s*WYCCAR",ed_str)[0][0]
    except:
        return ""

    pil = [x.split(" ") for x in pos_info_str.split("\n") if len(x.strip())!=0]
    
    for x in range(len(pil)):
        temp=[]
        for y in range(len(pil[x])):
            if len(pil[x][y].strip()):
                temp.append(pil[x][y])
        pil[x]=temp

    pos_str=""
    for x in range(len(pil)):
        cif_str+="\n%s %s %s %s %s %s %s 1.00000"%(pil[x][3],pil[x][3],pil[x][4],pil[x][5],pil[x][0],pil[x][1],pil[x][2])


    return cif_str




def _get_cif_aflow(qe_in,thresh=0.001):

#    with open(os.path.abspath(qe_in)) as ifo:
#        in_str = ifo.read()
    in_str=qe_in


    in_str = in_str.encode('utf-8')

    AFLOWSYM_LOC = os.path.join(AFLOWpi.__path__[0],'AFLOWSYM')
    AFLOW_EXE    = os.path.join(AFLOWSYM_LOC,'aflow')

    find_sym_process = subprocess.Popen('%s --edata=%s'%(AFLOW_EXE,thresh),stdin=subprocess.PIPE,
                                        stdout=subprocess.PIPE,shell=True)

    output = find_sym_process.communicate(input=in_str)[0].decode()



    as_cif = AFLOWpi.retr._parse_edata(output)

    return as_cif
