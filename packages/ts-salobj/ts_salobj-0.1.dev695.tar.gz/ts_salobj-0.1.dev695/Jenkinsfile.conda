properties(
    [
    buildDiscarder
        (logRotator (
            artifactDaysToKeepStr: '',
            artifactNumToKeepStr: '',
            daysToKeepStr: '14',
            numToKeepStr: '10'
        ) ),
    disableConcurrentBuilds()
    ]
)
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }    
    environment {
        salobj_version = sh(returnStdout: true, script: "git describe --tags --always --dirty").trim()
        dockerImageName = "lsstts/conda_package_builder:latest"
        container_name = "salobj_${BUILD_ID}_${JENKINS_NODE_COOKIE}"
        PYPI_CREDS = credentials("pypi")
    }
    parameters {
        string(defaultValue: 'default', description: 'The IDL Version', name: 'idl_version')
        booleanParam(defaultValue: false, description: "Are we going on to building the CSC package after salobj?", name: 'buildCSCConda')
        
    }
    stages {
        stage("Pull Docker Image") {
            steps {
                script {
                sh """
                docker pull ${dockerImageName}
                """
                }
            }
        }
        stage("Start builder"){
            steps {
                script {
                    sh """
                    echo ${dockerImageName}
                    docker run --name ${container_name} -di --rm --env \
                    TS_SALOBJ_VERSION=${salobj_version} \
                    --env TS_CONFIG_OCS_DIR=/home/saluser/ts_config_ocs \
                    --env TS_IDL_VERSION=${idl_version} \
                    -v ${WORKSPACE}:/home/saluser/source \
                    ${dockerImageName}
                    """
                }
            }
        }
        stage("Clone ts_config_ocs"){
            steps {
                script {
                    sh """
                    docker exec ${container_name} sh -c "git clone https://github.com/lsst-ts/ts_config_ocs.git"
                    """
                }
            }
        }
        stage("Create SALObj Conda package") {
            steps {
                script {
                    sh """
                    docker exec ${container_name} sh -c 'cd ~/source/conda && source ~/miniconda3/bin/activate && source "\$OSPL_HOME/release.com" && conda build --prefix-length 100 .'
                    """
                }
            }
        }
        stage("Push SALObj Conda package") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'CondaForge', passwordVariable: 'anaconda_pass', usernameVariable: 'anaconda_user')]) {
                    script {
                        sh """
                        docker exec ${container_name} sh -c "source ~/miniconda3/bin/activate && \
                            anaconda login --user ${anaconda_user} --password ${anaconda_pass} && \
                            anaconda upload -u lsstts --force \
                            ~/miniconda3/conda-bld/linux-64/ts-salobj*.tar.bz2"
                        """
                    }
                }
            }
        }
        stage("Create SALObj pypi package") {
            steps {
                script {
                    sh """
                        docker exec -u root --privileged \${container_name} sh -c \"chmod -R a+rw /home/saluser/source/\"
                    """

                    def RESULT = sh returnStatus: true, script: "docker exec -u saluser \${container_name} sh -c \"" +
                        "source ~/miniconda3/bin/activate && " +
                        "source /opt/OpenSpliceDDS/V6.9.0/HDE/x86_64.linux/release.com && " +
                        "pip install --upgrade twine && " +
                        "cd ~/source/ && " +
                        "python setup.py sdist bdist_wheel && " +
                        "python -m twine upload -u ${env.PYPI_CREDS_USR} -p ${env.PYPI_CREDS_PSW} dist/* \""

                    if ( RESULT != 0 ) {
                        unstable("Failed to create/push pypi package.")
                    }
                }
            }
        }
        stage("Trigger CSC Conda Broker Job") {
                when { expression { return env.buildCSCConda.toBoolean() } }
                steps {
                    echo "Starting the CSC_Conda_broker/develop job; idl_version: " + idl_version
                    build job: 'CSC_Conda_Broker', parameters: [\
                    string(name: 'idl_version', value: idl_version ), \
                    string(name: 'salobj_version', value: salobj_version ), \
                    booleanParam(name: 'Bleed', value: false), \
                    booleanParam(name: 'Daily', value: true), \
                    booleanParam(name: 'Release', value: false), \
                    string(name: 'Branch', value: 'develop')]
                }
            }
    }
    post {
        cleanup {
            sh """
            docker exec -u root --privileged \${container_name} sh -c \"chmod -R a+rw /home/saluser/source/\"
            docker stop ${container_name}
            """
        }
        always {
            step([$class: 'Mailer',
                notifyEveryUnstableBuild: false,
                recipients: "cwinslow@lsst.org",
                sendToIndividuals: true])
        }
    }
}
