# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs

__all__ = [
    'ListenerCertificate',
    'ListenerPortRange',
    'GetAcceleratorsAcceleratorResult',
    'GetAcceleratorsAcceleratorBasicBandwidthPackageResult',
    'GetAcceleratorsAcceleratorCrossDomainBandwidthPackageResult',
    'GetListenersListenerResult',
    'GetListenersListenerCertificateResult',
    'GetListenersListenerPortRangeResult',
]

@pulumi.output_type
class ListenerCertificate(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: The id of the certificate.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The id of the certificate.
        """
        return pulumi.get(self, "id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ListenerPortRange(dict):
    def __init__(__self__, *,
                 from_port: int,
                 to_port: int):
        """
        :param int from_port: The initial listening port used to receive requests and forward them to terminal nodes.
        :param int to_port: The end listening port used to receive requests and forward them to terminal nodes.
        """
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> int:
        """
        The initial listening port used to receive requests and forward them to terminal nodes.
        """
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> int:
        """
        The end listening port used to receive requests and forward them to terminal nodes.
        """
        return pulumi.get(self, "to_port")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class GetAcceleratorsAcceleratorResult(dict):
    def __init__(__self__, *,
                 accelerator_id: str,
                 accelerator_name: str,
                 basic_bandwidth_packages: Sequence['outputs.GetAcceleratorsAcceleratorBasicBandwidthPackageResult'],
                 cen_id: str,
                 cross_domain_bandwidth_packages: Sequence['outputs.GetAcceleratorsAcceleratorCrossDomainBandwidthPackageResult'],
                 ddos_id: str,
                 description: str,
                 dns_name: str,
                 expired_time: int,
                 id: str,
                 payment_type: str,
                 second_dns_name: str,
                 spec: str,
                 status: str):
        """
        :param str accelerator_id: The ID of the GA instance to query.
        :param str accelerator_name: The Name of the GA instance.
        :param Sequence['GetAcceleratorsAcceleratorBasicBandwidthPackageArgs'] basic_bandwidth_packages: Details of the basic bandwidth package bound to the global acceleration instance.
        :param str cen_id: The cloud enterprise network instance ID bound to the global acceleration instance.
        :param Sequence['GetAcceleratorsAcceleratorCrossDomainBandwidthPackageArgs'] cross_domain_bandwidth_packages: Details of the cross-domain acceleration package bound to the global acceleration instance.
        :param str ddos_id: DDoS high-defense instance ID that is unbound from the global acceleration instance.
        :param str description: Descriptive information of the global acceleration instance.
        :param str dns_name: CNAME address assigned by Global Acceleration instance.
        :param int expired_time: Time when the global acceleration instance expires.
        :param str id: The ID of the Accelerator.
        :param str payment_type: The Payment Typethe GA instance.
        :param str second_dns_name: CNAME of the Global Acceleration Linkage DDoS High Defense Instance.
        :param str spec: The instance type of the GA instance.
        :param str status: The status of the GA instance.
        """
        pulumi.set(__self__, "accelerator_id", accelerator_id)
        pulumi.set(__self__, "accelerator_name", accelerator_name)
        pulumi.set(__self__, "basic_bandwidth_packages", basic_bandwidth_packages)
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cross_domain_bandwidth_packages", cross_domain_bandwidth_packages)
        pulumi.set(__self__, "ddos_id", ddos_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "payment_type", payment_type)
        pulumi.set(__self__, "second_dns_name", second_dns_name)
        pulumi.set(__self__, "spec", spec)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="acceleratorId")
    def accelerator_id(self) -> str:
        """
        The ID of the GA instance to query.
        """
        return pulumi.get(self, "accelerator_id")

    @property
    @pulumi.getter(name="acceleratorName")
    def accelerator_name(self) -> str:
        """
        The Name of the GA instance.
        """
        return pulumi.get(self, "accelerator_name")

    @property
    @pulumi.getter(name="basicBandwidthPackages")
    def basic_bandwidth_packages(self) -> Sequence['outputs.GetAcceleratorsAcceleratorBasicBandwidthPackageResult']:
        """
        Details of the basic bandwidth package bound to the global acceleration instance.
        """
        return pulumi.get(self, "basic_bandwidth_packages")

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> str:
        """
        The cloud enterprise network instance ID bound to the global acceleration instance.
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="crossDomainBandwidthPackages")
    def cross_domain_bandwidth_packages(self) -> Sequence['outputs.GetAcceleratorsAcceleratorCrossDomainBandwidthPackageResult']:
        """
        Details of the cross-domain acceleration package bound to the global acceleration instance.
        """
        return pulumi.get(self, "cross_domain_bandwidth_packages")

    @property
    @pulumi.getter(name="ddosId")
    def ddos_id(self) -> str:
        """
        DDoS high-defense instance ID that is unbound from the global acceleration instance.
        """
        return pulumi.get(self, "ddos_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Descriptive information of the global acceleration instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        """
        CNAME address assigned by Global Acceleration instance.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> int:
        """
        Time when the global acceleration instance expires.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Accelerator.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="paymentType")
    def payment_type(self) -> str:
        """
        The Payment Typethe GA instance.
        """
        return pulumi.get(self, "payment_type")

    @property
    @pulumi.getter(name="secondDnsName")
    def second_dns_name(self) -> str:
        """
        CNAME of the Global Acceleration Linkage DDoS High Defense Instance.
        """
        return pulumi.get(self, "second_dns_name")

    @property
    @pulumi.getter
    def spec(self) -> str:
        """
        The instance type of the GA instance.
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the GA instance.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAcceleratorsAcceleratorBasicBandwidthPackageResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 bandwidth_type: str,
                 instance_id: str):
        """
        :param int bandwidth: Bandwidth value of cross-domain acceleration package.
        :param str bandwidth_type: The bandwidth type of the basic bandwidth package.
        :param str instance_id: Instance ID of the cross-domain acceleration package.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Bandwidth value of cross-domain acceleration package.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> str:
        """
        The bandwidth type of the basic bandwidth package.
        """
        return pulumi.get(self, "bandwidth_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID of the cross-domain acceleration package.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetAcceleratorsAcceleratorCrossDomainBandwidthPackageResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 instance_id: str):
        """
        :param int bandwidth: Bandwidth value of cross-domain acceleration package.
        :param str instance_id: Instance ID of the cross-domain acceleration package.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Bandwidth value of cross-domain acceleration package.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID of the cross-domain acceleration package.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetListenersListenerResult(dict):
    def __init__(__self__, *,
                 certificates: Sequence['outputs.GetListenersListenerCertificateResult'],
                 client_affinity: str,
                 description: str,
                 id: str,
                 listener_id: str,
                 name: str,
                 port_ranges: Sequence['outputs.GetListenersListenerPortRangeResult'],
                 protocol: str,
                 status: str):
        """
        :param Sequence['GetListenersListenerCertificateArgs'] certificates: The certificates of the listener.
        :param str client_affinity: The clientAffinity of the listener.
        :param str description: The description of the listener.
        :param str id: The ID of the Listener.
        :param str listener_id: The listenerId of the listener.
        :param str name: The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
        :param Sequence['GetListenersListenerPortRangeArgs'] port_ranges: The portRanges of the listener.
        :param str protocol: Type of network transport protocol monitored.
        :param str status: The status of the listener.
        """
        pulumi.set(__self__, "certificates", certificates)
        pulumi.set(__self__, "client_affinity", client_affinity)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port_ranges", port_ranges)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.GetListenersListenerCertificateResult']:
        """
        The certificates of the listener.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="clientAffinity")
    def client_affinity(self) -> str:
        """
        The clientAffinity of the listener.
        """
        return pulumi.get(self, "client_affinity")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the listener.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Listener.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        """
        The listenerId of the listener.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Sequence['outputs.GetListenersListenerPortRangeResult']:
        """
        The portRanges of the listener.
        """
        return pulumi.get(self, "port_ranges")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Type of network transport protocol monitored.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the listener.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetListenersListenerCertificateResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The ID of the Listener.
        :param str type: The type of the certificate.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Listener.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the certificate.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetListenersListenerPortRangeResult(dict):
    def __init__(__self__, *,
                 from_port: int,
                 to_port: int):
        """
        :param int from_port: The initial listening port used to receive requests and forward them to terminal nodes.
        :param int to_port: The end listening port used to receive requests and forward them to terminal nodes.
        """
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> int:
        """
        The initial listening port used to receive requests and forward them to terminal nodes.
        """
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> int:
        """
        The end listening port used to receive requests and forward them to terminal nodes.
        """
        return pulumi.get(self, "to_port")


