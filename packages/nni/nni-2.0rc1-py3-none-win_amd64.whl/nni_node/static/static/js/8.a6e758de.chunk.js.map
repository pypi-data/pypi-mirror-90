{"version":3,"sources":["static/model/experimentsManager.ts","components/managementExp/expFunction.ts","components/managementExp/experimentConst.ts","components/managementExp/Header.tsx","components/managementExp/TrialIdColumn.tsx","components/managementExp/FilterBtns.tsx","components/managementExp/ExperimentManager.tsx","components/overview/TitleContext.tsx","components/overview/Title.tsx"],"names":["ExperimentsManager","experimentList","platform","errorMessage","this","requestAxios","concat","MANAGER_IP","then","data","_step","platforms","Set","_iterator","_createForOfIteratorHelper","s","n","done","item","value","undefined","port","JSON","parse","add","err","e","f","_this","sort","a","b","startTime","Array","from","error","message","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","fillOptions","arr","list","map","push","key","text","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","react_default","createElement","className","Stack","horizontal","StackItem","grow","styles","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","stackTokens","stackStyle","react_router_dom","to","CommandBarButton","iconProps","RevToggleKey","TrialIdColumn","props","Object","classCallCheck","_super","call","_this$props","id","status","hostname","window","location","protocol","webuiPortal","react","href","target","rel","React","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKey","onChange","bind","placeholder","options","EXPERIMENTSTATUS","DatePicker","firstDayOfWeek","DayOfWeek","Sunday","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","onClick","Icon","iconName","Experiment","onColumnClick","_ev","getColumn","_this$state","state","columns","newColumns","slice","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","setState","name","maxWidth","isResizable","onRender","experimentName","managementExp_TrialIdColumn","expformatTimestamp","endTime","experimentClicked","_index","open","commonSelectString","_this$state2","hasStatus","hasPlatform","hasStartDate","hasEndDate","Date","_event","_this$state3","searchSource","result","_this$state4","hideFilter","searchInputVal","originExperimentList","EXPERIMENTMANAGER","init","getExperimentList","getPlatformList","getExpErrorMessage","_this$state5","style","minHeight","innerHeight","Header_Hearder","MessageInfo","info","typeInfo","TitleContext","Provider","icon","Title","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","gap","managementExp_FilterBtns","DetailsList","items","setKey","compact","selectionMode","onActiveItemChanged","_e","sortedData","newValue","_this$state6","searchInput","trim","toLowerCase","includes","sortedResult","date","_this$state7","_this$state8","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_fluentui_react__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","_TitleContext__WEBPACK_IMPORTED_MODULE_4__","initializeIcons","Consumer"],"mappings":"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","file":"static/js/8.a6e758de.chunk.js","sourcesContent":["import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                this.errorMessage = error.message;\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '../../static/interface';\nimport { copyAndSort } from '../../static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (val: string, type: string, data: AllExperimentList[]): AllExperimentList[] => {\n    return data.filter(temp => temp[type] === val);\n};\n\nfunction fillOptions(arr: string[]): any {\n    const list: Array<object> = [];\n\n    arr.map(item => {\n        list.push({ key: item, text: item });\n    });\n\n    return list;\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\r\nimport { RevToggleKey } from '../buttons/Icon';\r\nimport { NNILOGO } from '../stateless-component/NNItabs';\r\nimport { stackTokens, stackStyle } from '../NavConst';\r\n\r\nexport const Hearder = (): any => (\r\n    <div className='header'>\r\n        <div className='headerCon'>\r\n            <Stack className='nav' horizontal>\r\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\r\n                    <span className='desktop-logo'>{NNILOGO}</span>\r\n                    <span className='logoTitle'>Neural Network Intelligence</span>\r\n                </StackItem>\r\n                <StackItem grow={70} className='navOptions'>\r\n                    <Stack horizontal horizontalAlign='end' tokens={stackTokens} styles={stackStyle}>\r\n                        <Link to='/oview' className='experiment'>\r\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\r\n                        </Link>\r\n                    </Stack>\r\n                </StackItem>\r\n            </Stack>\r\n        </div>\r\n    </div>\r\n);\r\n","import * as React from 'react';\r\n\r\ninterface TrialIdColumnProps {\r\n    port: number;\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\r\n    constructor(props: TrialIdColumnProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { port, id, status } = this.props;\r\n        const hostname = window.location.hostname;\r\n        const protocol = window.location.protocol;\r\n        const webuiPortal = `${protocol}//${hostname}:${port}/oview`;\r\n        return (\r\n            <div className='succeed-padding ellipsis'>\r\n                {status === 'STOPPED' ? (\r\n                    <div className='idColor'>{id}</div>\r\n                ) : (\r\n                    <a\r\n                        href={webuiPortal}\r\n                        className='link toAnotherExp idColor'\r\n                        target='_blank'\r\n                        rel='noopener noreferrer'\r\n                    >\r\n                        {id}\r\n                    </a>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrialIdColumn;\r\n","import * as React from 'react';\r\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\r\nimport { EXPERIMENTSTATUS } from '../../static/const';\r\nimport { fillOptions } from './expFunction';\r\n\r\ninterface FilterBtnsProps {\r\n    platform: string[];\r\n    selectedStatus: string;\r\n    selectedPlatform: string;\r\n    selectedStartDate: Date;\r\n    selectedEndDate: Date;\r\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\r\n    setSearchSource: () => void;\r\n}\r\n\r\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\r\n    constructor(props: FilterBtnsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            selectedStatus,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            selectStatus,\r\n            selectPlatform,\r\n            getSelectedData,\r\n            setSearchSource\r\n        } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Dropdown\r\n                    label='Status'\r\n                    selectedKey={selectedStatus}\r\n                    onChange={selectStatus.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(EXPERIMENTSTATUS)}\r\n                    className='filter-condition-status'\r\n                />\r\n                <Dropdown\r\n                    label='Platform'\r\n                    selectedKey={selectedPlatform}\r\n                    onChange={selectPlatform.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(platform)}\r\n                    className='filter-condition-platform'\r\n                />\r\n                <DatePicker\r\n                    label='Start time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedStartDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'start')}\r\n                />\r\n                <DatePicker\r\n                    label='End time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedEndDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'end')}\r\n                />\r\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\r\n                    <Icon iconName='Refresh' />\r\n                    <span className='margin'>Reset</span>\r\n                </DefaultButton>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterBtns;\r\n","import * as React from 'react';\r\nimport { Stack, DetailsList, DefaultButton, Icon, SearchBox, IColumn } from '@fluentui/react';\r\nimport { ExperimentsManager } from '../../static/model/experimentsManager';\r\nimport { expformatTimestamp, copyAndSort } from '../../static/function';\r\nimport { AllExperimentList, SortInfo } from '../../static/interface';\r\nimport MessageInfo from '../modals/MessageInfo';\r\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\r\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\r\nimport { Hearder } from './Header';\r\nimport NameColumn from './TrialIdColumn';\r\nimport FilterBtns from './FilterBtns';\r\nimport { TitleContext } from '../overview/TitleContext';\r\nimport { Title } from '../overview/Title';\r\nimport '../../App.scss';\r\nimport '../../static/style/nav/nav.scss';\r\nimport '../../static/style/experiment/experiment.scss';\r\nimport '../../static/style/overview/probar.scss';\r\nimport '../../static/style/tableStatus.css';\r\n\r\ninterface ExpListState {\r\n    columns: IColumn[];\r\n    platform: string[];\r\n    errorMessage: string;\r\n    hideFilter: boolean;\r\n    searchInputVal: string;\r\n    selectedStatus: string;\r\n    selectedPlatform: string;\r\n    selectedStartDate?: Date;\r\n    selectedEndDate?: Date;\r\n    sortInfo: SortInfo;\r\n    source: AllExperimentList[];\r\n    originExperimentList: AllExperimentList[];\r\n    searchSource: AllExperimentList[];\r\n}\r\n\r\nclass Experiment extends React.Component<{}, ExpListState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            platform: [],\r\n            columns: this.columns,\r\n            errorMessage: '',\r\n            hideFilter: true,\r\n            searchInputVal: '',\r\n            selectedStatus: '',\r\n            selectedPlatform: '',\r\n            source: [], // data in table\r\n            originExperimentList: [], // api /experiments-info\r\n            searchSource: [], // search box search result\r\n            sortInfo: { field: '', isDescend: false }\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const EXPERIMENTMANAGER = new ExperimentsManager();\r\n        await EXPERIMENTMANAGER.init();\r\n        const result = EXPERIMENTMANAGER.getExperimentList();\r\n        this.setState(() => ({\r\n            source: result,\r\n            originExperimentList: result,\r\n            searchSource: result,\r\n            platform: EXPERIMENTMANAGER.getPlatformList(),\r\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\r\n        }));\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            hideFilter,\r\n            selectedStatus,\r\n            source,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            errorMessage\r\n        } = this.state;\r\n        return (\r\n            <Stack className='nni' style={{ minHeight: window.innerHeight }}>\r\n                <Hearder />\r\n                {errorMessage !== undefined ? (\r\n                    <div className='warning'>\r\n                        <MessageInfo info={errorMessage} typeInfo='error' />\r\n                    </div>\r\n                ) : null}\r\n                <Stack className='contentBox expBackground'>\r\n                    {/* 56px: navBarHeight; 48: marginTop & Bottom */}\r\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 104 } }}>\r\n                        <Stack className='experimentList'>\r\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\r\n                                <Title />\r\n                            </TitleContext.Provider>\r\n                            <Stack className='box' horizontal>\r\n                                <div className='search'>\r\n                                    <SearchBox\r\n                                        className='search-input'\r\n                                        placeholder='Search the experiment by name or ID'\r\n                                        onEscape={this.setOriginSource.bind(this)}\r\n                                        onClear={this.setOriginSource.bind(this)}\r\n                                        onChange={this.searchNameAndId.bind(this)}\r\n                                    />\r\n                                </div>\r\n                                <div className='filter'>\r\n                                    <DefaultButton\r\n                                        onClick={this.clickFilter.bind(this)}\r\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\r\n                                    >\r\n                                        <Icon iconName='Equalizer' />\r\n                                        <span className='margin'>Filter</span>\r\n                                    </DefaultButton>\r\n                                </div>\r\n                            </Stack>\r\n                            <Stack className={`${hideFilter ? 'hidden' : ''} filter-condition`} horizontal gap={25}>\r\n                                <FilterBtns\r\n                                    platform={platform}\r\n                                    selectedStatus={selectedStatus}\r\n                                    selectedPlatform={selectedPlatform}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedStartDate={selectedStartDate!}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedEndDate={selectedEndDate!}\r\n                                    selectStatus={this.selectStatus.bind(this)}\r\n                                    selectPlatform={this.selectPlatform.bind(this)}\r\n                                    getSelectedData={this.getSelectedData.bind(this)}\r\n                                    setSearchSource={this.setSearchSource.bind(this)}\r\n                                />\r\n                            </Stack>\r\n                            <DetailsList\r\n                                columns={this.columns}\r\n                                items={source}\r\n                                setKey='set'\r\n                                compact={true}\r\n                                selectionMode={0} // close selector function\r\n                                className='table'\r\n                                onActiveItemChanged={this.experimentClicked}\r\n                            />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\r\n        const { columns, source } = this.state;\r\n        const newColumns: IColumn[] = columns.slice();\r\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\r\n        newColumns.forEach((newCol: IColumn) => {\r\n            if (newCol === currColumn) {\r\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\r\n                currColumn.isSorted = true;\r\n            } else {\r\n                newCol.isSorted = false;\r\n                newCol.isSortedDescending = true;\r\n            }\r\n        });\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\r\n        this.setState(() => ({\r\n            columns: newColumns,\r\n            source: newItems,\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\r\n        }));\r\n    };\r\n\r\n    private columns: IColumn[] = [\r\n        {\r\n            name: 'Name',\r\n            key: 'experimentName',\r\n            fieldName: 'experimentName', // required!\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className='succeed-padding'>{item.experimentName}</div>\r\n        },\r\n        {\r\n            name: 'ID',\r\n            key: 'id',\r\n            fieldName: 'id',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            className: 'tableHead leftTitle',\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <NameColumn port={item.port} status={item.status} id={item.id} />\r\n        },\r\n        {\r\n            name: 'Status',\r\n            key: 'status',\r\n            fieldName: 'status',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className={`${item.status} commonStyle succeed-padding`}>{item.status}</div>\r\n            )\r\n        },\r\n        {\r\n            name: 'Port',\r\n            key: 'port',\r\n            fieldName: 'port',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className='succeed-padding'>\r\n                    <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\r\n                        {item.port !== undefined ? item.port : '--'}\r\n                    </div>\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            name: 'Platform',\r\n            key: 'platform',\r\n            fieldName: 'platform',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className='commonStyle succeed-padding'>{item.platform}</div>\r\n        },\r\n        {\r\n            name: 'Start time',\r\n            key: 'startTime',\r\n            fieldName: 'startTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className='succeed-padding'>\r\n                    <div>{expformatTimestamp(item.startTime)}</div>\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            name: 'End time',\r\n            key: 'endTime',\r\n            fieldName: 'endTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className='succeed-padding'>\r\n                    <div>{expformatTimestamp(item.endTime)}</div>\r\n                </div>\r\n            )\r\n        }\r\n    ];\r\n\r\n    private experimentClicked = (item?: any, _index?: number, _ev?: React.FocusEvent<HTMLElement>): void => {\r\n        if (item.status !== 'STOPPED' && item.port !== undefined) {\r\n            const hostname = window.location.hostname;\r\n            const protocol = window.location.protocol;\r\n            const webuiPortal = `${protocol}//${hostname}:${item.port}/oview`;\r\n            window.open(webuiPortal);\r\n        }\r\n    };\r\n\r\n    private clickFilter(_e: any): void {\r\n        const { hideFilter } = this.state;\r\n        if (!hideFilter === true) {\r\n            this.setSearchSource();\r\n        }\r\n        this.setState(() => ({ hideFilter: !hideFilter }));\r\n    }\r\n\r\n    private setOriginSource(): void {\r\n        let { originExperimentList } = this.state;\r\n        const { sortInfo } = this.state;\r\n        if (originExperimentList !== undefined) {\r\n            originExperimentList = this.commonSelectString(originExperimentList, '');\r\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\r\n            this.setState(() => ({\r\n                source: sortedData\r\n            }));\r\n        }\r\n    }\r\n\r\n    private searchNameAndId(_event, newValue): void {\r\n        const { originExperimentList, sortInfo } = this.state;\r\n        if (newValue !== undefined) {\r\n            if (newValue === '') {\r\n                this.setOriginSource();\r\n            } else {\r\n                const searchInput = newValue.trim();\r\n                let result = originExperimentList.filter(\r\n                    item =>\r\n                        item.experimentName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\r\n                );\r\n                result = this.commonSelectString(result, '');\r\n                const sortedResult = getSortedSource(result, sortInfo);\r\n                this.setState(() => ({\r\n                    source: sortedResult,\r\n                    searchSource: sortedResult\r\n                }));\r\n            }\r\n            this.setState(() => ({\r\n                searchInputVal: newValue.trim()\r\n            }));\r\n        }\r\n    }\r\n\r\n    /***\r\n     * status, platform\r\n     * param\r\n     * data: searchSource\r\n     * field: no care selected filed\r\n     */\r\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\r\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\r\n        const hasStatus = selectedStatus === '' ? false : true;\r\n        const hasPlatform = selectedPlatform === '' ? false : true;\r\n        const hasStartDate = selectedStartDate === undefined ? false : true;\r\n        const hasEndDate = selectedEndDate === undefined ? false : true;\r\n\r\n        if (field === 'status') {\r\n            if (hasPlatform) {\r\n                data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\r\n            }\r\n        }\r\n        if (field === 'platform') {\r\n            if (hasStatus) {\r\n                data = filterByStatusOrPlatform(selectedStatus, 'status', data);\r\n            }\r\n        }\r\n\r\n        if (field === '') {\r\n            if (hasPlatform) {\r\n                data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\r\n            }\r\n            if (hasStatus) {\r\n                data = filterByStatusOrPlatform(selectedStatus, 'status', data);\r\n            }\r\n        }\r\n\r\n        if (hasStartDate) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            data = data.filter(temp => compareDate(new Date(temp.startTime), selectedStartDate!));\r\n        }\r\n        if (hasEndDate) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            data = data.filter(temp => compareDate(new Date(temp.endTime), selectedEndDate!));\r\n        }\r\n\r\n        return data;\r\n    };\r\n\r\n    // status platform startTime endTime\r\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo } = this.state;\r\n            let result = filterByStatusOrPlatform(item.key, 'status', searchSource);\r\n            result = this.commonSelectString(result, 'status');\r\n            this.setState({ selectedStatus: item.key, source: getSortedSource(result, sortInfo) });\r\n        }\r\n    };\r\n\r\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo } = this.state;\r\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\r\n            result = this.commonSelectString(result, 'platform');\r\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\r\n        }\r\n    };\r\n\r\n    private getSelectedData(type: string, date: Date | null | undefined): void {\r\n        if (date !== null && date !== undefined) {\r\n            const {\r\n                selectedStatus,\r\n                selectedPlatform,\r\n                selectedStartDate,\r\n                selectedEndDate,\r\n                searchSource,\r\n                sortInfo\r\n            } = this.state;\r\n            const hasStatus = selectedStatus === '' ? false : true;\r\n            const hasPlatform = selectedPlatform === '' ? false : true;\r\n            const hasStartDate = selectedStartDate === undefined ? false : true;\r\n            const hasEndDate = selectedEndDate === undefined ? false : true;\r\n            let result;\r\n            if (type === 'start') {\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                result = searchSource.filter(item => compareDate(new Date(item.startTime), date));\r\n                if (hasStatus) {\r\n                    result = result.filter(temp => temp.status === selectedStatus);\r\n                }\r\n                if (hasPlatform) {\r\n                    result = result.filter(temp => temp.platform === selectedPlatform);\r\n                }\r\n                if (hasEndDate) {\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    result = result.filter(temp => compareDate(new Date(temp.endTime), selectedEndDate!));\r\n                }\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedStartDate: date\r\n                }));\r\n            } else {\r\n                result = searchSource.filter(item => compareDate(new Date(item.endTime), date));\r\n\r\n                if (hasStatus) {\r\n                    result = result.filter(temp => temp.status === selectedStatus);\r\n                }\r\n                if (hasPlatform) {\r\n                    result = result.filter(temp => temp.platform === selectedPlatform);\r\n                }\r\n                if (hasStartDate) {\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    result = result.filter(temp => compareDate(new Date(temp.startTime), selectedStartDate!));\r\n                }\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedEndDate: date\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset\r\n    private setSearchSource(): void {\r\n        const { sortInfo, originExperimentList } = this.state;\r\n        let { searchInputVal } = this.state;\r\n        searchInputVal = searchInputVal.trim();\r\n        // hert re-search data for fix this status: filter first -> searchBox search result null -> close filter\r\n        const result = originExperimentList.filter(\r\n            item =>\r\n                item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()) ||\r\n                item.id.toLowerCase().includes(searchInputVal.toLowerCase())\r\n        );\r\n        this.setState(() => ({\r\n            source: getSortedSource(result, sortInfo),\r\n            selectedStatus: '',\r\n            selectedPlatform: '',\r\n            selectedStartDate: undefined,\r\n            selectedEndDate: undefined\r\n        }));\r\n    }\r\n}\r\n\r\nexport default Experiment;\r\n","import * as React from 'react';\r\n\r\nexport const TitleContext = React.createContext({\r\n    text: '',\r\n    icon: ''\r\n});\r\n","import React from 'react';\r\nimport { Stack, Icon, initializeIcons } from '@fluentui/react';\r\nimport { TitleContext } from './TitleContext';\r\nimport '../../static/style/overview/overviewTitle.scss';\r\ninitializeIcons();\r\n\r\nexport const Title = (): any => (\r\n    <TitleContext.Consumer>\r\n        {(value): React.ReactNode => (\r\n            <Stack horizontal className='panelTitle'>\r\n                <Icon iconName={value.icon} />\r\n                <span>{value.text}</span>\r\n            </Stack>\r\n        )}\r\n    </TitleContext.Consumer>\r\n);\r\n"],"sourceRoot":""}