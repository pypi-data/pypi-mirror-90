{"version":3,"sources":["static/model/experimentsManager.ts","components/managementExp/expFunction.ts","components/managementExp/experimentConst.ts","components/managementExp/Header.tsx","components/managementExp/TrialIdColumn.tsx","components/managementExp/FilterBtns.tsx","components/managementExp/ExperimentManager.tsx","components/overview/TitleContext.tsx","components/overview/Title.tsx"],"names":["ExperimentsManager","experimentList","platform","errorMessage","this","requestAxios","concat","MANAGER_IP","then","data","_step","platforms","Set","_iterator","_createForOfIteratorHelper","s","n","done","item","value","undefined","port","JSON","parse","add","err","e","f","_this","sort","a","b","startTime","Array","from","error","message","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","fillOptions","arr","list","map","push","key","text","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","react_default","createElement","className","Stack","horizontal","StackItem","grow","styles","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","stackTokens","stackStyle","react_router_dom","to","CommandBarButton","iconProps","RevToggleKey","TrialIdColumn","props","Object","classCallCheck","_super","call","_this$props","id","status","hostname","window","location","protocol","webuiPortal","react","href","target","rel","React","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKey","onChange","bind","placeholder","options","EXPERIMENTSTATUS","DatePicker","firstDayOfWeek","DayOfWeek","Sunday","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","onClick","Icon","iconName","Experiment","onColumnClick","_ev","getColumn","_this$state","state","columns","newColumns","slice","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","setState","name","maxWidth","isResizable","onRender","experimentName","managementExp_TrialIdColumn","expformatTimestamp","endTime","experimentClicked","_index","open","commonSelectString","_this$state2","hasStatus","hasPlatform","hasStartDate","hasEndDate","Date","_event","_this$state3","searchSource","result","_this$state4","hideFilter","searchInputVal","originExperimentList","EXPERIMENTMANAGER","init","getExperimentList","getPlatformList","getExpErrorMessage","_this$state5","style","minHeight","innerHeight","Header_Hearder","MessageInfo","info","typeInfo","TitleContext","Provider","icon","Title","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","gap","managementExp_FilterBtns","DetailsList","items","setKey","compact","selectionMode","onActiveItemChanged","_e","sortedData","newValue","_this$state6","searchInput","trim","toLowerCase","includes","sortedResult","date","_this$state7","_this$state8","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","_fluentui_react__WEBPACK_IMPORTED_MODULE_1__","_fluentui_react__WEBPACK_IMPORTED_MODULE_2__","_fluentui_react__WEBPACK_IMPORTED_MODULE_3__","_TitleContext__WEBPACK_IMPORTED_MODULE_4__","initializeIcons","Consumer"],"mappings":"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","file":"static/js/8.03fbc594.chunk.js","sourcesContent":["import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                this.errorMessage = error.message;\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '../../static/interface';\nimport { copyAndSort } from '../../static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (val: string, type: string, data: AllExperimentList[]): AllExperimentList[] => {\n    return data.filter(temp => temp[type] === val);\n};\n\nfunction fillOptions(arr: string[]): any {\n    const list: Array<object> = [];\n\n    arr.map(item => {\n        list.push({ key: item, text: item });\n    });\n\n    return list;\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\nimport { RevToggleKey } from '../buttons/Icon';\nimport { NNILOGO } from '../stateless-component/NNItabs';\nimport { stackTokens, stackStyle } from '../NavConst';\n\nexport const Hearder = (): any => (\n    <div className='header'>\n        <div className='headerCon'>\n            <Stack className='nav' horizontal>\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\n                    <span className='desktop-logo'>{NNILOGO}</span>\n                    <span className='logoTitle'>Neural Network Intelligence</span>\n                </StackItem>\n                <StackItem grow={70} className='navOptions'>\n                    <Stack horizontal horizontalAlign='end' tokens={stackTokens} styles={stackStyle}>\n                        <Link to='/oview' className='experiment'>\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\n                        </Link>\n                    </Stack>\n                </StackItem>\n            </Stack>\n        </div>\n    </div>\n);\n","import * as React from 'react';\n\ninterface TrialIdColumnProps {\n    port: number;\n    id: string;\n    status: string;\n}\n\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\n    constructor(props: TrialIdColumnProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { port, id, status } = this.props;\n        const hostname = window.location.hostname;\n        const protocol = window.location.protocol;\n        const webuiPortal = `${protocol}//${hostname}:${port}/oview`;\n        return (\n            <div className='succeed-padding ellipsis'>\n                {status === 'STOPPED' ? (\n                    <div className='idColor'>{id}</div>\n                ) : (\n                    <a\n                        href={webuiPortal}\n                        className='link toAnotherExp idColor'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        {id}\n                    </a>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default TrialIdColumn;\n","import * as React from 'react';\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\nimport { EXPERIMENTSTATUS } from '../../static/const';\nimport { fillOptions } from './expFunction';\n\ninterface FilterBtnsProps {\n    platform: string[];\n    selectedStatus: string;\n    selectedPlatform: string;\n    selectedStartDate: Date;\n    selectedEndDate: Date;\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\n    setSearchSource: () => void;\n}\n\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\n    constructor(props: FilterBtnsProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const {\n            platform,\n            selectedStatus,\n            selectedPlatform,\n            selectedStartDate,\n            selectedEndDate,\n            selectStatus,\n            selectPlatform,\n            getSelectedData,\n            setSearchSource\n        } = this.props;\n\n        return (\n            <React.Fragment>\n                <Dropdown\n                    label='Status'\n                    selectedKey={selectedStatus}\n                    onChange={selectStatus.bind(this)}\n                    placeholder='Select an option'\n                    options={fillOptions(EXPERIMENTSTATUS)}\n                    className='filter-condition-status'\n                />\n                <Dropdown\n                    label='Platform'\n                    selectedKey={selectedPlatform}\n                    onChange={selectPlatform.bind(this)}\n                    placeholder='Select an option'\n                    options={fillOptions(platform)}\n                    className='filter-condition-platform'\n                />\n                <DatePicker\n                    label='Start time'\n                    firstDayOfWeek={DayOfWeek.Sunday}\n                    showMonthPickerAsOverlay={true}\n                    placeholder='Select a date...'\n                    ariaLabel='Select a date'\n                    value={selectedStartDate}\n                    onSelectDate={getSelectedData.bind(this, 'start')}\n                />\n                <DatePicker\n                    label='End time'\n                    firstDayOfWeek={DayOfWeek.Sunday}\n                    showMonthPickerAsOverlay={true}\n                    placeholder='Select a date...'\n                    ariaLabel='Select a date'\n                    value={selectedEndDate}\n                    onSelectDate={getSelectedData.bind(this, 'end')}\n                />\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\n                    <Icon iconName='Refresh' />\n                    <span className='margin'>Reset</span>\n                </DefaultButton>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default FilterBtns;\n","import * as React from 'react';\nimport { Stack, DetailsList, DefaultButton, Icon, SearchBox, IColumn } from '@fluentui/react';\nimport { ExperimentsManager } from '../../static/model/experimentsManager';\nimport { expformatTimestamp, copyAndSort } from '../../static/function';\nimport { AllExperimentList, SortInfo } from '../../static/interface';\nimport MessageInfo from '../modals/MessageInfo';\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\nimport { Hearder } from './Header';\nimport NameColumn from './TrialIdColumn';\nimport FilterBtns from './FilterBtns';\nimport { TitleContext } from '../overview/TitleContext';\nimport { Title } from '../overview/Title';\nimport '../../App.scss';\nimport '../../static/style/nav/nav.scss';\nimport '../../static/style/experiment/experiment.scss';\nimport '../../static/style/overview/probar.scss';\nimport '../../static/style/tableStatus.css';\n\ninterface ExpListState {\n    columns: IColumn[];\n    platform: string[];\n    errorMessage: string;\n    hideFilter: boolean;\n    searchInputVal: string;\n    selectedStatus: string;\n    selectedPlatform: string;\n    selectedStartDate?: Date;\n    selectedEndDate?: Date;\n    sortInfo: SortInfo;\n    source: AllExperimentList[];\n    originExperimentList: AllExperimentList[];\n    searchSource: AllExperimentList[];\n}\n\nclass Experiment extends React.Component<{}, ExpListState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            platform: [],\n            columns: this.columns,\n            errorMessage: '',\n            hideFilter: true,\n            searchInputVal: '',\n            selectedStatus: '',\n            selectedPlatform: '',\n            source: [], // data in table\n            originExperimentList: [], // api /experiments-info\n            searchSource: [], // search box search result\n            sortInfo: { field: '', isDescend: false }\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const EXPERIMENTMANAGER = new ExperimentsManager();\n        await EXPERIMENTMANAGER.init();\n        const result = EXPERIMENTMANAGER.getExperimentList();\n        this.setState(() => ({\n            source: result,\n            originExperimentList: result,\n            searchSource: result,\n            platform: EXPERIMENTMANAGER.getPlatformList(),\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\n        }));\n    }\n\n    render(): React.ReactNode {\n        const {\n            platform,\n            hideFilter,\n            selectedStatus,\n            source,\n            selectedPlatform,\n            selectedStartDate,\n            selectedEndDate,\n            errorMessage\n        } = this.state;\n        return (\n            <Stack className='nni' style={{ minHeight: window.innerHeight }}>\n                <Hearder />\n                {errorMessage !== undefined ? (\n                    <div className='warning'>\n                        <MessageInfo info={errorMessage} typeInfo='error' />\n                    </div>\n                ) : null}\n                <Stack className='contentBox expBackground'>\n                    {/* 56px: navBarHeight; 48: marginTop & Bottom */}\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 104 } }}>\n                        <Stack className='experimentList'>\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\n                                <Title />\n                            </TitleContext.Provider>\n                            <Stack className='box' horizontal>\n                                <div className='search'>\n                                    <SearchBox\n                                        className='search-input'\n                                        placeholder='Search the experiment by name or ID'\n                                        onEscape={this.setOriginSource.bind(this)}\n                                        onClear={this.setOriginSource.bind(this)}\n                                        onChange={this.searchNameAndId.bind(this)}\n                                    />\n                                </div>\n                                <div className='filter'>\n                                    <DefaultButton\n                                        onClick={this.clickFilter.bind(this)}\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\n                                    >\n                                        <Icon iconName='Equalizer' />\n                                        <span className='margin'>Filter</span>\n                                    </DefaultButton>\n                                </div>\n                            </Stack>\n                            <Stack className={`${hideFilter ? 'hidden' : ''} filter-condition`} horizontal gap={25}>\n                                <FilterBtns\n                                    platform={platform}\n                                    selectedStatus={selectedStatus}\n                                    selectedPlatform={selectedPlatform}\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    selectedStartDate={selectedStartDate!}\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                    selectedEndDate={selectedEndDate!}\n                                    selectStatus={this.selectStatus.bind(this)}\n                                    selectPlatform={this.selectPlatform.bind(this)}\n                                    getSelectedData={this.getSelectedData.bind(this)}\n                                    setSearchSource={this.setSearchSource.bind(this)}\n                                />\n                            </Stack>\n                            <DetailsList\n                                columns={this.columns}\n                                items={source}\n                                setKey='set'\n                                compact={true}\n                                selectionMode={0} // close selector function\n                                className='table'\n                                onActiveItemChanged={this.experimentClicked}\n                            />\n                        </Stack>\n                    </Stack>\n                </Stack>\n            </Stack>\n        );\n    }\n\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\n        const { columns, source } = this.state;\n        const newColumns: IColumn[] = columns.slice();\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\n        newColumns.forEach((newCol: IColumn) => {\n            if (newCol === currColumn) {\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\n                currColumn.isSorted = true;\n            } else {\n                newCol.isSorted = false;\n                newCol.isSortedDescending = true;\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\n        this.setState(() => ({\n            columns: newColumns,\n            source: newItems,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\n        }));\n    };\n\n    private columns: IColumn[] = [\n        {\n            name: 'Name',\n            key: 'experimentName',\n            fieldName: 'experimentName', // required!\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className='succeed-padding'>{item.experimentName}</div>\n        },\n        {\n            name: 'ID',\n            key: 'id',\n            fieldName: 'id',\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            className: 'tableHead leftTitle',\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <NameColumn port={item.port} status={item.status} id={item.id} />\n        },\n        {\n            name: 'Status',\n            key: 'status',\n            fieldName: 'status',\n            minWidth: MINSCREENCOLUMNWIDHT,\n            maxWidth: MAXSCREENCOLUMNWIDHT,\n            isResizable: true,\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className={`${item.status} commonStyle succeed-padding`}>{item.status}</div>\n            )\n        },\n        {\n            name: 'Port',\n            key: 'port',\n            fieldName: 'port',\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className='succeed-padding'>\n                    <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\n                        {item.port !== undefined ? item.port : '--'}\n                    </div>\n                </div>\n            )\n        },\n        {\n            name: 'Platform',\n            key: 'platform',\n            fieldName: 'platform',\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\n            isResizable: true,\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className='commonStyle succeed-padding'>{item.platform}</div>\n        },\n        {\n            name: 'Start time',\n            key: 'startTime',\n            fieldName: 'startTime',\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className='succeed-padding'>\n                    <div>{expformatTimestamp(item.startTime)}</div>\n                </div>\n            )\n        },\n        {\n            name: 'End time',\n            key: 'endTime',\n            fieldName: 'endTime',\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className='succeed-padding'>\n                    <div>{expformatTimestamp(item.endTime)}</div>\n                </div>\n            )\n        }\n    ];\n\n    private experimentClicked = (item?: any, _index?: number, _ev?: React.FocusEvent<HTMLElement>): void => {\n        if (item.status !== 'STOPPED' && item.port !== undefined) {\n            const hostname = window.location.hostname;\n            const protocol = window.location.protocol;\n            const webuiPortal = `${protocol}//${hostname}:${item.port}/oview`;\n            window.open(webuiPortal);\n        }\n    };\n\n    private clickFilter(_e: any): void {\n        const { hideFilter } = this.state;\n        if (!hideFilter === true) {\n            this.setSearchSource();\n        }\n        this.setState(() => ({ hideFilter: !hideFilter }));\n    }\n\n    private setOriginSource(): void {\n        let { originExperimentList } = this.state;\n        const { sortInfo } = this.state;\n        if (originExperimentList !== undefined) {\n            originExperimentList = this.commonSelectString(originExperimentList, '');\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\n            this.setState(() => ({\n                source: sortedData\n            }));\n        }\n    }\n\n    private searchNameAndId(_event, newValue): void {\n        const { originExperimentList, sortInfo } = this.state;\n        if (newValue !== undefined) {\n            if (newValue === '') {\n                this.setOriginSource();\n            } else {\n                const searchInput = newValue.trim();\n                let result = originExperimentList.filter(\n                    item =>\n                        item.experimentName.toLowerCase().includes(searchInput.toLowerCase()) ||\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\n                );\n                result = this.commonSelectString(result, '');\n                const sortedResult = getSortedSource(result, sortInfo);\n                this.setState(() => ({\n                    source: sortedResult,\n                    searchSource: sortedResult\n                }));\n            }\n            this.setState(() => ({\n                searchInputVal: newValue.trim()\n            }));\n        }\n    }\n\n    /***\n     * status, platform\n     * param\n     * data: searchSource\n     * field: no care selected filed\n     */\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\n        const hasStatus = selectedStatus === '' ? false : true;\n        const hasPlatform = selectedPlatform === '' ? false : true;\n        const hasStartDate = selectedStartDate === undefined ? false : true;\n        const hasEndDate = selectedEndDate === undefined ? false : true;\n\n        if (field === 'status') {\n            if (hasPlatform) {\n                data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\n            }\n        }\n        if (field === 'platform') {\n            if (hasStatus) {\n                data = filterByStatusOrPlatform(selectedStatus, 'status', data);\n            }\n        }\n\n        if (field === '') {\n            if (hasPlatform) {\n                data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\n            }\n            if (hasStatus) {\n                data = filterByStatusOrPlatform(selectedStatus, 'status', data);\n            }\n        }\n\n        if (hasStartDate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            data = data.filter(temp => compareDate(new Date(temp.startTime), selectedStartDate!));\n        }\n        if (hasEndDate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            data = data.filter(temp => compareDate(new Date(temp.endTime), selectedEndDate!));\n        }\n\n        return data;\n    };\n\n    // status platform startTime endTime\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            const { searchSource, sortInfo } = this.state;\n            let result = filterByStatusOrPlatform(item.key, 'status', searchSource);\n            result = this.commonSelectString(result, 'status');\n            this.setState({ selectedStatus: item.key, source: getSortedSource(result, sortInfo) });\n        }\n    };\n\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            const { searchSource, sortInfo } = this.state;\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\n            result = this.commonSelectString(result, 'platform');\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\n        }\n    };\n\n    private getSelectedData(type: string, date: Date | null | undefined): void {\n        if (date !== null && date !== undefined) {\n            const {\n                selectedStatus,\n                selectedPlatform,\n                selectedStartDate,\n                selectedEndDate,\n                searchSource,\n                sortInfo\n            } = this.state;\n            const hasStatus = selectedStatus === '' ? false : true;\n            const hasPlatform = selectedPlatform === '' ? false : true;\n            const hasStartDate = selectedStartDate === undefined ? false : true;\n            const hasEndDate = selectedEndDate === undefined ? false : true;\n            let result;\n            if (type === 'start') {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                result = searchSource.filter(item => compareDate(new Date(item.startTime), date));\n                if (hasStatus) {\n                    result = result.filter(temp => temp.status === selectedStatus);\n                }\n                if (hasPlatform) {\n                    result = result.filter(temp => temp.platform === selectedPlatform);\n                }\n                if (hasEndDate) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    result = result.filter(temp => compareDate(new Date(temp.endTime), selectedEndDate!));\n                }\n                this.setState(() => ({\n                    source: getSortedSource(result, sortInfo),\n                    selectedStartDate: date\n                }));\n            } else {\n                result = searchSource.filter(item => compareDate(new Date(item.endTime), date));\n\n                if (hasStatus) {\n                    result = result.filter(temp => temp.status === selectedStatus);\n                }\n                if (hasPlatform) {\n                    result = result.filter(temp => temp.platform === selectedPlatform);\n                }\n                if (hasStartDate) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    result = result.filter(temp => compareDate(new Date(temp.startTime), selectedStartDate!));\n                }\n                this.setState(() => ({\n                    source: getSortedSource(result, sortInfo),\n                    selectedEndDate: date\n                }));\n            }\n        }\n    }\n\n    // reset\n    private setSearchSource(): void {\n        const { sortInfo, originExperimentList } = this.state;\n        let { searchInputVal } = this.state;\n        searchInputVal = searchInputVal.trim();\n        // hert re-search data for fix this status: filter first -> searchBox search result null -> close filter\n        const result = originExperimentList.filter(\n            item =>\n                item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()) ||\n                item.id.toLowerCase().includes(searchInputVal.toLowerCase())\n        );\n        this.setState(() => ({\n            source: getSortedSource(result, sortInfo),\n            selectedStatus: '',\n            selectedPlatform: '',\n            selectedStartDate: undefined,\n            selectedEndDate: undefined\n        }));\n    }\n}\n\nexport default Experiment;\n","import * as React from 'react';\n\nexport const TitleContext = React.createContext({\n    text: '',\n    icon: ''\n});\n","import React from 'react';\nimport { Stack, Icon, initializeIcons } from '@fluentui/react';\nimport { TitleContext } from './TitleContext';\nimport '../../static/style/overview/overviewTitle.scss';\ninitializeIcons();\n\nexport const Title = (): any => (\n    <TitleContext.Consumer>\n        {(value): React.ReactNode => (\n            <Stack horizontal className='panelTitle'>\n                <Icon iconName={value.icon} />\n                <span>{value.text}</span>\n            </Stack>\n        )}\n    </TitleContext.Consumer>\n);\n"],"sourceRoot":""}