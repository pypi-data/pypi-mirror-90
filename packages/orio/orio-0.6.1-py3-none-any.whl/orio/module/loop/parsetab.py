
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COLON COMMA CONST DIVEQUAL DIVIDE ELSE EQ EQUALS FCONST FOR GE GOTO GT ICONST ID IF LAND LBRACE LBRACKET LE LINECOMMENT LNOT LOR LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR PERIOD PLUS PLUSEQUAL PLUSPLUS RBRACE RBRACKET REGISTER RPAREN SCONST_D SCONST_S SEMI TIMES TIMESEQUAL TRANSFORM VOLATILEannotation : statement_liststatement_list :statement_list : statementstatement_list : statement_list statementstatement : labeled_statement\n                 | goto_statement\n                 | expression_statement\n                 | compound_statement\n                 | selection_statement\n                 | iteration_statement\n                 | transformation_statement\n                 | line_comment\n                 | declaration\n                 labeled_statement : label COLON statementlabel : ID \n            | ICONST\n    line_comment : LINECOMMENTdeclaration : typename var_decl_list SEMIdeclaration : qual typename var_decl_list SEMItypename : IDqual : CONST\n            | REGISTER\n            | VOLATILE\n    var_decl_list : var_declvar_decl_list : var_decl_list var_declvar_decl    : IDvar_decl    : ID EQUALS expressionexpression_statement : expression_opt SEMIgoto_statement : GOTO label SEMIcompound_statement : LBRACE statement_list RBRACEselection_statement : IF LPAREN expression RPAREN statementselection_statement : IF LPAREN expression RPAREN statement ELSE statementiteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statementtransformation_statement : TRANSFORM ID LPAREN transformation_argument_list_opt RPAREN statementtransformation_statement : TRANSFORM ID LPAREN transformation_argument_list_opt RPARENtransformation_argument_list_opt :transformation_argument_list_opt : transformation_argument_listtransformation_argument_list : transformation_argumenttransformation_argument_list : transformation_argument_list COMMA transformation_argumenttransformation_argument : ID EQUALS py_expressionexpression_opt :expression_opt : expressionexpression : assignment_expressionexpression : expression COMMA assignment_expressionexpression : typename IDassignment_expression : logical_or_expressionassignment_expression : unary_expression assignment_operator assignment_expressionassignment_operator : EQUALS\n                           | TIMESEQUAL\n                           | DIVEQUAL\n                           | MODEQUAL\n                           | PLUSEQUAL\n                           | MINUSEQUAL\n                           logical_or_expression : logical_and_expressionlogical_or_expression : logical_or_expression LOR logical_and_expressionlogical_and_expression : equality_expressionlogical_and_expression : logical_and_expression LAND equality_expressionequality_expression : relational_expressionequality_expression : equality_expression equality_operator relational_expressionequality_operator : EQ\n                         | NErelational_expression : additive_expressionrelational_expression : relational_expression relational_operator additive_expressionrelational_operator : LT\n                           | GT\n                           | LE\n                           | GEadditive_expression : multiplicative_expressionadditive_expression : additive_expression additive_operator multiplicative_expressionadditive_operator : PLUS\n                         | MINUSmultiplicative_expression : unary_expressionmultiplicative_expression : multiplicative_expression multiplicative_operator unary_expressionmultiplicative_operator : TIMES\n                               | DIVIDE\n                               | MODunary_expression : postfix_expressionunary_expression : PLUSPLUS unary_expressionunary_expression : MINUSMINUS unary_expressionunary_expression : unary_operator unary_expressionunary_expression : LPAREN ID RPAREN unary_expressionunary_operator : PLUS\n                      | MINUS\n                      | LNOT postfix_expression : primary_expressionpostfix_expression : postfix_expression LBRACKET expression RBRACKETpostfix_expression : postfix_expression LPAREN argument_expression_list_opt RPARENpostfix_expression : postfix_expression PLUSPLUSpostfix_expression : postfix_expression MINUSMINUSprimary_expression : IDprimary_expression : ICONSTprimary_expression : FCONSTprimary_expression : SCONST_Dprimary_expression : LPAREN expression RPARENargument_expression_list_opt :argument_expression_list_opt : argument_expression_listargument_expression_list : assignment_expressionargument_expression_list : argument_expression_list COMMA assignment_expressionpy_expression : py_m_expressionpy_expression : py_conditional_expressionpy_expression_list_opt : py_expression_list_opt : py_expression_listpy_expression_list : py_expressionpy_expression_list : py_expression_list COMMA py_expressionpy_conditional_expression : py_m_expression IF py_m_expression ELSE py_m_expressionpy_m_expression : py_u_expressionpy_m_expression : py_m_expression py_binary_operator py_u_expressionpy_binary_operator : PLUS\n                          | MINUS\n                          | TIMES\n                          | DIVIDE\n                          | MOD\n                          | LT\n                          | GT\n                          | LE\n                          | GE\n                          | EQ\n                          | NE\n                          | AND\n                          | ORpy_u_expression : py_primarypy_u_expression : PLUS py_u_expression\n                       | MINUS py_u_expression\n                       | NOT py_u_expressionpy_primary : py_atom\n                  | py_subscription\n                  | py_attribute_ref\n                  | py_call\n                  | py_list_display\n                  | py_dict_displaypy_subscription : py_primary LBRACKET py_expression_list RBRACKETpy_attribute_ref : py_primary PERIOD IDpy_call : py_primary LPAREN py_expression_list_opt RPARENpy_list_display : LBRACKET py_expression_list_opt RBRACKETpy_dict_display : LBRACE py_key_datum_list_opt RBRACEpy_key_datum_list_opt : py_key_datum_list_opt : py_key_datum_listpy_key_datum_list : py_key_datumpy_key_datum_list : py_key_datum_list COMMA py_key_datumpy_key_datum : py_expression COLON py_expressionpy_atom : ID\n               | ICONST\n               | FCONST\n               | SCONST_D\n               | SCONST_Spy_atom : LPAREN py_expression_list_opt RPAREN'
    
_lr_action_items = {'GOTO':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[14,14,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,14,-17,-4,14,-28,14,-14,-29,-30,-18,14,-19,-31,14,14,-34,-32,14,-33,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,142,143,146,154,155,156,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,203,210,213,214,215,216,],[16,16,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,-17,-4,16,-28,16,-14,-29,-30,-18,16,-19,-31,169,16,16,169,169,169,169,169,169,-34,-32,169,169,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,169,169,16,169,169,169,-33,169,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,148,150,152,153,157,158,159,160,161,162,163,164,165,166,170,172,192,193,194,203,204,207,209,211,212,215,217,218,],[17,17,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,-17,-4,17,-28,17,-14,-29,-30,-18,17,-19,-31,17,17,-141,175,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-34,-32,-122,-123,-124,17,-107,-132,-146,-134,-135,-33,-131,-133,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,-17,-4,20,-28,20,-14,-29,-30,-18,20,-19,-31,20,20,-34,-32,20,-33,]),'TRANSFORM':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,-17,-4,21,-28,21,-14,-29,-30,-18,21,-19,-31,21,21,-34,-32,21,-33,]),'LINECOMMENT':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,23,-17,-4,23,-28,23,-14,-29,-30,-18,23,-19,-31,23,23,-34,-32,23,-33,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,18,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,53,54,55,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,107,108,110,111,112,113,114,115,116,117,118,119,124,125,126,127,128,129,130,135,136,137,138,139,140,142,143,144,146,147,154,155,156,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,203,210,213,214,215,216,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,51,22,56,62,-20,-17,64,67,-21,-22,-23,-43,-46,-72,-54,-77,82,82,82,-56,-85,-82,-83,-84,-58,-92,-93,-62,-68,-4,22,-28,22,104,-20,107,-91,82,104,113,-26,-24,113,-20,82,82,-48,-49,-50,-51,-52,-53,82,104,82,-88,-89,-78,-90,-79,-80,82,-60,-61,82,-64,-65,-66,-67,82,-70,-71,82,-74,-75,-76,-14,-29,-30,-20,82,-94,-45,-44,131,-18,-25,-26,104,113,-55,-72,-47,-57,-59,-63,-69,-73,22,-81,104,-27,-19,-86,-87,82,-31,148,22,131,22,104,148,148,148,148,148,148,-34,-32,148,148,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,148,207,148,22,148,148,148,-33,148,]),'ICONST':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,18,23,35,36,37,40,41,42,48,49,53,54,55,60,61,68,69,70,71,72,73,74,75,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,111,114,128,130,136,139,140,142,143,146,147,154,155,156,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,203,210,213,214,215,216,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,52,26,59,-17,59,59,59,-82,-83,-84,-4,26,-28,26,59,59,59,59,59,-48,-49,-50,-51,-52,-53,59,59,59,59,-60,-61,59,-64,-65,-66,-67,59,-70,-71,59,-74,-75,-76,-14,-29,-30,59,-18,59,26,59,-19,59,-31,163,26,26,59,163,163,163,163,163,163,-34,-32,163,163,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,163,163,26,163,163,163,-33,163,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,27,-17,-4,27,-28,27,-14,-29,-30,-18,27,-19,-31,27,27,-34,-32,27,-33,]),'REGISTER':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,28,-17,-4,28,-28,28,-14,-29,-30,-18,28,-19,-31,28,28,-34,-32,28,-33,]),'VOLATILE':([0,2,3,4,5,6,7,8,9,10,11,12,16,23,48,49,53,54,100,101,102,111,128,136,140,143,146,170,172,203,215,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,29,-17,-4,29,-28,29,-14,-29,-30,-18,29,-19,-31,29,29,-34,-32,29,-33,]),'PLUSPLUS':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,22,23,26,34,35,36,37,39,40,41,42,44,45,48,49,53,54,55,56,59,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,111,114,128,130,136,137,138,139,140,143,146,147,170,172,203,215,],[35,35,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,35,35,-90,-17,-91,79,35,35,35,-85,-82,-83,-84,-92,-93,-4,35,-28,35,35,-90,-91,35,35,35,35,-48,-49,-50,-51,-52,-53,35,35,35,-88,-89,-90,35,-60,-61,35,-64,-65,-66,-67,35,-70,-71,35,-74,-75,-76,-14,-29,-30,-90,35,-94,-18,35,35,35,-19,-86,-87,35,-31,35,35,35,-34,-32,35,-33,]),'MINUSMINUS':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,22,23,26,34,35,36,37,39,40,41,42,44,45,48,49,53,54,55,56,59,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,111,114,128,130,136,137,138,139,140,143,146,147,170,172,203,215,],[36,36,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,36,36,-90,-17,-91,80,36,36,36,-85,-82,-83,-84,-92,-93,-4,36,-28,36,36,-90,-91,36,36,36,36,-48,-49,-50,-51,-52,-53,36,36,36,-88,-89,-90,36,-60,-61,36,-64,-65,-66,-67,36,-70,-71,36,-74,-75,-76,-14,-29,-30,-90,36,-94,-18,36,36,36,-19,-86,-87,36,-31,36,36,36,-34,-32,36,-33,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,18,20,22,23,26,34,35,36,37,39,40,41,42,44,45,48,49,53,54,55,56,59,60,61,62,68,69,70,71,72,73,74,75,76,77,78,79,80,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,111,114,128,130,136,137,138,139,140,142,143,146,147,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,203,207,209,210,211,212,213,214,215,216,217,218,],[18,18,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,55,18,61,-90,-17,-91,78,18,18,18,-85,-82,-83,-84,-92,-93,-4,18,-28,18,18,-90,-91,18,18,110,18,18,-48,-49,-50,-51,-52,-53,18,18,18,-88,-89,-90,18,-60,-61,18,-64,-65,-66,-67,18,-70,-71,18,-74,-75,-76,-14,-29,-30,-90,18,-94,-18,18,18,18,-19,-86,-87,18,-31,167,18,18,18,-141,191,167,167,167,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,167,167,167,-34,-32,167,167,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,167,167,18,-132,-146,167,-134,-135,167,167,-33,167,-131,-133,]),'PLUS':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,22,23,26,32,34,35,36,37,39,40,41,42,44,45,46,47,48,49,53,54,55,56,59,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,111,114,117,125,126,127,128,129,130,136,137,138,139,140,142,143,146,147,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,192,193,194,203,204,205,207,209,210,211,212,213,214,215,216,217,218,222,],[40,40,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,40,40,-90,-17,-91,-72,-77,40,40,40,-85,-82,-83,-84,-92,-93,94,-68,-4,40,-28,40,40,-90,-91,40,40,40,40,-48,-49,-50,-51,-52,-53,40,40,40,-88,-89,-78,-90,-79,-80,40,-60,-61,40,-64,-65,-66,-67,40,-70,-71,40,-74,-75,-76,-14,-29,-30,-90,40,-94,-18,40,-72,94,-69,-73,40,-81,40,-19,-86,-87,40,-31,154,40,40,40,-141,176,-106,-121,154,154,154,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,154,154,154,-34,-32,154,154,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,154,154,-122,-123,-124,40,-107,176,-132,-146,154,-134,-135,154,154,-33,154,-131,-133,176,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,22,23,26,32,34,35,36,37,39,40,41,42,44,45,46,47,48,49,53,54,55,56,59,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,111,114,117,125,126,127,128,129,130,136,137,138,139,140,142,143,146,147,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,192,193,194,203,204,205,207,209,210,211,212,213,214,215,216,217,218,222,],[41,41,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,41,41,-90,-17,-91,-72,-77,41,41,41,-85,-82,-83,-84,-92,-93,95,-68,-4,41,-28,41,41,-90,-91,41,41,41,41,-48,-49,-50,-51,-52,-53,41,41,41,-88,-89,-78,-90,-79,-80,41,-60,-61,41,-64,-65,-66,-67,41,-70,-71,41,-74,-75,-76,-14,-29,-30,-90,41,-94,-18,41,-72,95,-69,-73,41,-81,41,-19,-86,-87,41,-31,155,41,41,41,-141,177,-106,-121,155,155,155,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,155,155,155,-34,-32,155,155,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,155,155,-122,-123,-124,41,-107,177,-132,-146,155,-134,-135,155,155,-33,155,-131,-133,177,]),'LNOT':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,23,35,36,37,40,41,42,48,49,53,54,55,60,61,68,69,70,71,72,73,74,75,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,111,114,128,130,136,139,140,143,146,147,170,172,203,215,],[42,42,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,42,42,-17,42,42,42,-82,-83,-84,-4,42,-28,42,42,42,42,42,42,-48,-49,-50,-51,-52,-53,42,42,42,42,-60,-61,42,-64,-65,-66,-67,42,-70,-71,42,-74,-75,-76,-14,-29,-30,42,-18,42,42,42,-19,42,-31,42,42,42,-34,-32,42,-33,]),'FCONST':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,23,35,36,37,40,41,42,48,49,53,54,55,60,61,68,69,70,71,72,73,74,75,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,111,114,128,130,136,139,140,142,143,146,147,154,155,156,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,203,210,213,214,215,216,],[44,44,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,44,44,-17,44,44,44,-82,-83,-84,-4,44,-28,44,44,44,44,44,44,-48,-49,-50,-51,-52,-53,44,44,44,44,-60,-61,44,-64,-65,-66,-67,44,-70,-71,44,-74,-75,-76,-14,-29,-30,44,-18,44,44,44,-19,44,-31,164,44,44,44,164,164,164,164,164,164,-34,-32,164,164,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,164,164,44,164,164,164,-33,164,]),'SCONST_D':([0,2,3,4,5,6,7,8,9,10,11,12,16,18,23,35,36,37,40,41,42,48,49,53,54,55,60,61,68,69,70,71,72,73,74,75,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,111,114,128,130,136,139,140,142,143,146,147,154,155,156,167,168,169,170,172,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,203,210,213,214,215,216,],[45,45,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,45,45,-17,45,45,45,-82,-83,-84,-4,45,-28,45,45,45,45,45,45,-48,-49,-50,-51,-52,-53,45,45,45,45,-60,-61,45,-64,-65,-66,-67,45,-70,-71,45,-74,-75,-76,-14,-29,-30,45,-18,45,45,45,-19,45,-31,165,45,45,45,165,165,165,165,165,165,-34,-32,165,165,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,165,165,45,165,165,165,-33,165,]),'SEMI':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,19,22,23,26,30,31,32,33,34,38,39,43,44,45,46,47,48,49,50,51,52,53,54,59,61,63,64,65,79,80,81,82,83,84,100,101,102,104,106,107,108,109,111,112,113,115,116,117,118,119,124,125,126,127,128,129,130,135,136,137,138,140,141,143,146,170,172,203,215,],[-2,-41,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,53,-2,-42,-90,-17,-91,-43,-46,-72,-54,-77,-56,-85,-58,-92,-93,-62,-68,-4,-41,101,-15,-16,-28,-41,-91,-41,111,-26,-24,-88,-89,-78,-90,-79,-80,-14,-29,-30,-90,-94,-45,-44,130,-18,-25,-26,136,-55,-72,-47,-57,-59,-63,-69,-73,-41,-81,-41,-27,-19,-86,-87,-31,147,-35,-41,-34,-32,-41,-33,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,23,48,53,100,101,102,111,136,140,143,170,172,215,],[-2,0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-17,-4,-28,-14,-29,-30,-18,-19,-31,-35,-34,-32,-33,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,16,23,48,53,54,100,101,102,111,136,140,143,148,150,151,152,153,157,158,159,160,161,162,163,164,165,166,169,170,172,192,193,194,199,200,201,204,207,209,211,212,215,217,218,220,221,222,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-17,-4,-28,102,-14,-29,-30,-18,-19,-31,-35,-141,-99,-100,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-136,-34,-32,-122,-123,-124,212,-137,-138,-107,-132,-146,-134,-135,-33,-131,-133,-139,-140,-105,]),'ELSE':([4,5,6,7,8,9,10,11,12,23,53,100,101,102,111,136,140,143,148,152,153,157,158,159,160,161,162,163,164,165,166,170,172,192,193,194,204,205,207,209,211,212,215,217,218,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-17,-28,-14,-29,-30,-18,-19,146,-35,-141,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-34,-32,-122,-123,-124,-107,216,-132,-146,-134,-135,-33,-131,-133,]),'COLON':([13,22,26,148,150,151,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,202,204,207,209,211,212,217,218,222,],[49,-15,-16,-141,-99,-100,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,214,-107,-132,-146,-134,-135,-131,-133,-105,]),'RPAREN':([19,30,31,32,33,34,38,39,43,44,45,46,47,56,57,59,78,79,80,81,82,83,84,103,104,106,107,108,110,116,117,118,119,121,122,123,124,125,126,127,129,132,133,134,137,138,145,147,148,149,150,151,152,153,157,158,159,160,161,162,163,164,165,166,167,171,173,191,192,193,194,195,196,197,204,207,208,209,211,212,217,218,219,222,],[-42,-43,-46,-72,-54,-77,-56,-85,-58,-92,-93,-62,-68,105,106,-91,-95,-88,-89,-78,-90,-79,-80,128,-90,-94,-45,-44,-36,-55,-72,-47,-57,138,-96,-97,-59,-63,-69,-73,-81,143,-37,-38,-86,-87,-98,-41,-141,-40,-99,-100,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-101,-39,203,-101,-122,-123,-124,209,-102,-103,-107,-132,218,-146,-134,-135,-131,-133,-104,-105,]),'COMMA':([19,22,26,30,31,32,33,34,38,39,43,44,45,46,47,56,57,59,64,79,80,81,82,83,84,103,104,106,107,108,116,117,118,119,120,122,123,124,125,126,127,129,133,134,135,137,138,145,148,149,150,151,152,153,157,158,159,160,161,162,163,164,165,166,171,192,193,194,196,197,200,201,204,206,207,209,211,212,217,218,219,220,221,222,],[60,-90,-91,-43,-46,-72,-54,-77,-56,-85,-58,-92,-93,-62,-68,-90,60,-91,-45,-88,-89,-78,-90,-79,-80,60,-90,-94,-45,-44,-55,-72,-47,-57,60,139,-97,-59,-63,-69,-73,-81,144,-38,60,-86,-87,-98,-141,-40,-99,-100,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-39,-122,-123,-124,210,-103,213,-138,-107,210,-132,-146,-134,-135,-131,-133,-104,-139,-140,-105,]),'LBRACKET':([22,26,34,39,44,45,56,59,79,80,82,104,106,137,138,142,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,207,209,210,211,212,213,214,216,217,218,],[-90,-91,77,-85,-92,-93,-90,-91,-88,-89,-90,-90,-94,-86,-87,168,-141,189,168,168,168,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,168,168,168,168,168,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,168,168,-132,-146,168,-134,-135,168,168,168,-131,-133,]),'EQUALS':([22,26,32,34,39,44,45,56,59,64,79,80,81,82,83,84,104,106,113,129,131,137,138,],[-90,-91,70,-77,-85,-92,-93,-90,-91,114,-88,-89,-78,-90,-79,-80,-90,-94,114,-81,142,-86,-87,]),'TIMESEQUAL':([22,26,32,34,39,44,45,56,59,79,80,81,82,83,84,104,106,129,137,138,],[-90,-91,71,-77,-85,-92,-93,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-81,-86,-87,]),'DIVEQUAL':([22,26,32,34,39,44,45,56,59,79,80,81,82,83,84,104,106,129,137,138,],[-90,-91,72,-77,-85,-92,-93,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-81,-86,-87,]),'MODEQUAL':([22,26,32,34,39,44,45,56,59,79,80,81,82,83,84,104,106,129,137,138,],[-90,-91,73,-77,-85,-92,-93,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-81,-86,-87,]),'PLUSEQUAL':([22,26,32,34,39,44,45,56,59,79,80,81,82,83,84,104,106,129,137,138,],[-90,-91,74,-77,-85,-92,-93,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-81,-86,-87,]),'MINUSEQUAL':([22,26,32,34,39,44,45,56,59,79,80,81,82,83,84,104,106,129,137,138,],[-90,-91,75,-77,-85,-92,-93,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-81,-86,-87,]),'TIMES':([22,26,32,34,39,44,45,47,56,59,79,80,81,82,83,84,104,106,117,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,-92,-93,97,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,97,-73,-81,-86,-87,-141,178,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,178,-132,-146,-134,-135,-131,-133,178,]),'DIVIDE':([22,26,32,34,39,44,45,47,56,59,79,80,81,82,83,84,104,106,117,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,-92,-93,98,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,98,-73,-81,-86,-87,-141,179,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,179,-132,-146,-134,-135,-131,-133,179,]),'MOD':([22,26,32,34,39,44,45,47,56,59,79,80,81,82,83,84,104,106,117,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,-92,-93,99,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,99,-73,-81,-86,-87,-141,180,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,180,-132,-146,-134,-135,-131,-133,180,]),'LT':([22,26,32,34,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,117,124,125,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,89,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,89,-63,-69,-73,-81,-86,-87,-141,181,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,181,-132,-146,-134,-135,-131,-133,181,]),'GT':([22,26,32,34,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,117,124,125,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,90,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,90,-63,-69,-73,-81,-86,-87,-141,182,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,182,-132,-146,-134,-135,-131,-133,182,]),'LE':([22,26,32,34,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,117,124,125,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,91,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,91,-63,-69,-73,-81,-86,-87,-141,183,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,183,-132,-146,-134,-135,-131,-133,183,]),'GE':([22,26,32,34,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,117,124,125,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,-85,92,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,92,-63,-69,-73,-81,-86,-87,-141,184,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,184,-132,-146,-134,-135,-131,-133,184,]),'EQ':([22,26,32,34,38,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,117,119,124,125,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,86,-85,-58,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,86,-59,-63,-69,-73,-81,-86,-87,-141,185,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,185,-132,-146,-134,-135,-131,-133,185,]),'NE':([22,26,32,34,38,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,117,119,124,125,126,127,129,137,138,148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-90,-91,-72,-77,87,-85,-58,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-72,87,-59,-63,-69,-73,-81,-86,-87,-141,186,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,186,-132,-146,-134,-135,-131,-133,186,]),'LAND':([22,26,32,33,34,38,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,116,117,119,124,125,126,127,129,137,138,],[-90,-91,-72,76,-77,-56,-85,-58,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,76,-72,-57,-59,-63,-69,-73,-81,-86,-87,]),'LOR':([22,26,31,32,33,34,38,39,43,44,45,46,47,56,59,79,80,81,82,83,84,104,106,116,117,119,124,125,126,127,129,137,138,],[-90,-91,68,-72,-54,-77,-56,-85,-58,-92,-93,-62,-68,-90,-91,-88,-89,-78,-90,-79,-80,-90,-94,-55,-72,-57,-59,-63,-69,-73,-81,-86,-87,]),'RBRACKET':([30,31,32,33,34,38,39,43,44,45,46,47,59,79,80,81,82,83,84,104,106,107,108,116,117,118,119,120,124,125,126,127,129,137,138,148,150,151,152,153,157,158,159,160,161,162,163,164,165,166,168,192,193,194,196,197,198,204,206,207,209,211,212,217,218,219,222,],[-43,-46,-72,-54,-77,-56,-85,-58,-92,-93,-62,-68,-91,-88,-89,-78,-90,-79,-80,-90,-94,-45,-44,-55,-72,-47,-57,137,-59,-63,-69,-73,-81,-86,-87,-141,-99,-100,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-101,-122,-123,-124,-102,-103,211,-107,217,-132,-146,-134,-135,-131,-133,-104,-105,]),'NOT':([142,154,155,156,167,168,169,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,210,213,214,216,],[156,156,156,156,156,156,156,156,156,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,156,156,156,156,156,156,]),'SCONST_S':([142,154,155,156,167,168,169,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,191,210,213,214,216,],[166,166,166,166,166,166,166,166,166,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,166,166,166,166,166,166,]),'PERIOD':([148,153,157,158,159,160,161,162,163,164,165,166,207,209,211,212,217,218,],[-141,190,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-132,-146,-134,-135,-131,-133,]),'AND':([148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-141,187,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,187,-132,-146,-134,-135,-131,-133,187,]),'OR':([148,150,152,153,157,158,159,160,161,162,163,164,165,166,192,193,194,204,205,207,209,211,212,217,218,222,],[-141,188,-106,-121,-125,-126,-127,-128,-129,-130,-142,-143,-144,-145,-122,-123,-124,-107,188,-132,-146,-134,-135,-131,-133,188,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'annotation':([0,],[1,]),'statement_list':([0,16,],[2,54,]),'statement':([0,2,16,49,54,128,143,146,203,],[3,48,3,100,48,140,170,172,215,]),'labeled_statement':([0,2,16,49,54,128,143,146,203,],[4,4,4,4,4,4,4,4,4,]),'goto_statement':([0,2,16,49,54,128,143,146,203,],[5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,16,49,54,128,143,146,203,],[6,6,6,6,6,6,6,6,6,]),'compound_statement':([0,2,16,49,54,128,143,146,203,],[7,7,7,7,7,7,7,7,7,]),'selection_statement':([0,2,16,49,54,128,143,146,203,],[8,8,8,8,8,8,8,8,8,]),'iteration_statement':([0,2,16,49,54,128,143,146,203,],[9,9,9,9,9,9,9,9,9,]),'transformation_statement':([0,2,16,49,54,128,143,146,203,],[10,10,10,10,10,10,10,10,10,]),'line_comment':([0,2,16,49,54,128,143,146,203,],[11,11,11,11,11,11,11,11,11,]),'declaration':([0,2,16,49,54,128,143,146,203,],[12,12,12,12,12,12,12,12,12,]),'label':([0,2,14,16,49,54,128,143,146,203,],[13,13,50,13,13,13,13,13,13,13,]),'expression_opt':([0,2,16,49,54,61,128,130,143,146,147,203,],[15,15,15,15,15,109,15,141,15,15,173,15,]),'expression':([0,2,16,18,49,54,55,61,77,114,128,130,143,146,147,203,],[19,19,19,57,19,19,103,19,120,135,19,19,19,19,19,19,]),'typename':([0,2,16,18,25,49,54,55,61,77,114,128,130,143,146,147,203,],[24,24,24,58,66,24,24,58,58,58,58,24,58,24,24,58,24,]),'qual':([0,2,16,49,54,128,143,146,203,],[25,25,25,25,25,25,25,25,25,]),'assignment_expression':([0,2,16,18,49,54,55,60,61,69,77,78,114,128,130,139,143,146,147,203,],[30,30,30,30,30,30,30,108,30,118,30,123,30,30,30,145,30,30,30,30,]),'logical_or_expression':([0,2,16,18,49,54,55,60,61,69,77,78,114,128,130,139,143,146,147,203,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'unary_expression':([0,2,16,18,35,36,37,49,54,55,60,61,68,69,76,77,78,85,88,93,96,105,114,128,130,139,143,146,147,203,],[32,32,32,32,81,83,84,32,32,32,32,32,117,32,117,32,32,117,117,117,127,129,32,32,32,32,32,32,32,32,]),'logical_and_expression':([0,2,16,18,49,54,55,60,61,68,69,77,78,114,128,130,139,143,146,147,203,],[33,33,33,33,33,33,33,33,33,116,33,33,33,33,33,33,33,33,33,33,33,]),'postfix_expression':([0,2,16,18,35,36,37,49,54,55,60,61,68,69,76,77,78,85,88,93,96,105,114,128,130,139,143,146,147,203,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'unary_operator':([0,2,16,18,35,36,37,49,54,55,60,61,68,69,76,77,78,85,88,93,96,105,114,128,130,139,143,146,147,203,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'equality_expression':([0,2,16,18,49,54,55,60,61,68,69,76,77,78,114,128,130,139,143,146,147,203,],[38,38,38,38,38,38,38,38,38,38,38,119,38,38,38,38,38,38,38,38,38,38,]),'primary_expression':([0,2,16,18,35,36,37,49,54,55,60,61,68,69,76,77,78,85,88,93,96,105,114,128,130,139,143,146,147,203,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'relational_expression':([0,2,16,18,49,54,55,60,61,68,69,76,77,78,85,114,128,130,139,143,146,147,203,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,124,43,43,43,43,43,43,43,43,]),'additive_expression':([0,2,16,18,49,54,55,60,61,68,69,76,77,78,85,88,114,128,130,139,143,146,147,203,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,125,46,46,46,46,46,46,46,46,]),'multiplicative_expression':([0,2,16,18,49,54,55,60,61,68,69,76,77,78,85,88,93,114,128,130,139,143,146,147,203,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,126,47,47,47,47,47,47,47,47,]),'var_decl_list':([24,66,],[63,115,]),'var_decl':([24,63,66,115,],[65,112,65,112,]),'assignment_operator':([32,],[69,]),'equality_operator':([38,119,],[85,85,]),'relational_operator':([43,124,],[88,88,]),'additive_operator':([46,125,],[93,93,]),'multiplicative_operator':([47,126,],[96,96,]),'argument_expression_list_opt':([78,],[121,]),'argument_expression_list':([78,],[122,]),'transformation_argument_list_opt':([110,],[132,]),'transformation_argument_list':([110,],[133,]),'transformation_argument':([110,144,],[134,171,]),'py_expression':([142,167,168,169,189,191,210,213,214,],[149,197,197,202,197,197,219,202,221,]),'py_m_expression':([142,167,168,169,175,189,191,210,213,214,216,],[150,150,150,150,205,150,150,150,150,150,222,]),'py_conditional_expression':([142,167,168,169,189,191,210,213,214,],[151,151,151,151,151,151,151,151,151,]),'py_u_expression':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[152,192,193,194,152,152,152,204,152,152,152,152,152,152,152,]),'py_primary':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,]),'py_atom':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,]),'py_subscription':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,]),'py_attribute_ref':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,]),'py_call':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,]),'py_list_display':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,]),'py_dict_display':([142,154,155,156,167,168,169,174,175,189,191,210,213,214,216,],[162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,]),'py_binary_operator':([150,205,222,],[174,174,174,]),'py_expression_list_opt':([167,168,191,],[195,198,208,]),'py_expression_list':([167,168,189,191,],[196,196,206,196,]),'py_key_datum_list_opt':([169,],[199,]),'py_key_datum_list':([169,],[200,]),'py_key_datum':([169,213,],[201,220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> annotation","S'",1,None,None,None),
  ('annotation -> statement_list','annotation',1,'p_annotation','parser.py',127),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list_1','parser.py',132),
  ('statement_list -> statement','statement_list',1,'p_statement_list_2','parser.py',137),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_3','parser.py',141),
  ('statement -> labeled_statement','statement',1,'p_statement','parser.py',147),
  ('statement -> goto_statement','statement',1,'p_statement','parser.py',148),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',149),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',150),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',151),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',152),
  ('statement -> transformation_statement','statement',1,'p_statement','parser.py',153),
  ('statement -> line_comment','statement',1,'p_statement','parser.py',154),
  ('statement -> declaration','statement',1,'p_statement','parser.py',155),
  ('labeled_statement -> label COLON statement','labeled_statement',3,'p_labeled_statement','parser.py',162),
  ('label -> ID','label',1,'p_label','parser.py',167),
  ('label -> ICONST','label',1,'p_label','parser.py',168),
  ('line_comment -> LINECOMMENT','line_comment',1,'p_line_comment','parser.py',174),
  ('declaration -> typename var_decl_list SEMI','declaration',3,'p_declaration_1','parser.py',186),
  ('declaration -> qual typename var_decl_list SEMI','declaration',4,'p_declaration_2','parser.py',195),
  ('typename -> ID','typename',1,'p_typename','parser.py',204),
  ('qual -> CONST','qual',1,'p_qual','parser.py',208),
  ('qual -> REGISTER','qual',1,'p_qual','parser.py',209),
  ('qual -> VOLATILE','qual',1,'p_qual','parser.py',210),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list_1','parser.py',215),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list_2','parser.py',219),
  ('var_decl -> ID','var_decl',1,'p_var_decl_1','parser.py',224),
  ('var_decl -> ID EQUALS expression','var_decl',3,'p_var_decl_2','parser.py',228),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',234),
  ('goto_statement -> GOTO label SEMI','goto_statement',3,'p_goto_statement','parser.py',238),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',243),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','parser.py',251),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','parser.py',255),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',260),
  ('transformation_statement -> TRANSFORM ID LPAREN transformation_argument_list_opt RPAREN statement','transformation_statement',6,'p_transformation_statement','parser.py',265),
  ('transformation_statement -> TRANSFORM ID LPAREN transformation_argument_list_opt RPAREN','transformation_statement',5,'p_transformation_statement2','parser.py',269),
  ('transformation_argument_list_opt -> <empty>','transformation_argument_list_opt',0,'p_transformation_argument_list_opt_1','parser.py',274),
  ('transformation_argument_list_opt -> transformation_argument_list','transformation_argument_list_opt',1,'p_transformation_argument_list_opt_2','parser.py',278),
  ('transformation_argument_list -> transformation_argument','transformation_argument_list',1,'p_transformation_argument_list_1','parser.py',282),
  ('transformation_argument_list -> transformation_argument_list COMMA transformation_argument','transformation_argument_list',3,'p_transformation_argument_list_2','parser.py',286),
  ('transformation_argument -> ID EQUALS py_expression','transformation_argument',3,'p_transformation_argument','parser.py',292),
  ('expression_opt -> <empty>','expression_opt',0,'p_expression_opt_1','parser.py',297),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt_2','parser.py',301),
  ('expression -> assignment_expression','expression',1,'p_expression_1','parser.py',305),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression_2','parser.py',309),
  ('expression -> typename ID','expression',2,'p_expression_3','parser.py',313),
  ('assignment_expression -> logical_or_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',322),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',326),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','parser.py',350),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','parser.py',351),
  ('assignment_operator -> DIVEQUAL','assignment_operator',1,'p_assignment_operator','parser.py',352),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','parser.py',353),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','parser.py',354),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','parser.py',355),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression_1','parser.py',361),
  ('logical_or_expression -> logical_or_expression LOR logical_and_expression','logical_or_expression',3,'p_logical_or_expression_2','parser.py',365),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression_1','parser.py',370),
  ('logical_and_expression -> logical_and_expression LAND equality_expression','logical_and_expression',3,'p_logical_and_expression_2','parser.py',374),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',379),
  ('equality_expression -> equality_expression equality_operator relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',383),
  ('equality_operator -> EQ','equality_operator',1,'p_equality_operator','parser.py',393),
  ('equality_operator -> NE','equality_operator',1,'p_equality_operator','parser.py',394),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression_1','parser.py',399),
  ('relational_expression -> relational_expression relational_operator additive_expression','relational_expression',3,'p_relational_expression_2','parser.py',403),
  ('relational_operator -> LT','relational_operator',1,'p_relational_operator','parser.py',417),
  ('relational_operator -> GT','relational_operator',1,'p_relational_operator','parser.py',418),
  ('relational_operator -> LE','relational_operator',1,'p_relational_operator','parser.py',419),
  ('relational_operator -> GE','relational_operator',1,'p_relational_operator','parser.py',420),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression_1','parser.py',425),
  ('additive_expression -> additive_expression additive_operator multiplicative_expression','additive_expression',3,'p_additive_expression_2','parser.py',429),
  ('additive_operator -> PLUS','additive_operator',1,'p_additive_operator','parser.py',439),
  ('additive_operator -> MINUS','additive_operator',1,'p_additive_operator','parser.py',440),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression_1','parser.py',445),
  ('multiplicative_expression -> multiplicative_expression multiplicative_operator unary_expression','multiplicative_expression',3,'p_multiplicative_expression_2','parser.py',449),
  ('multiplicative_operator -> TIMES','multiplicative_operator',1,'p_multiplicative_operator','parser.py',461),
  ('multiplicative_operator -> DIVIDE','multiplicative_operator',1,'p_multiplicative_operator','parser.py',462),
  ('multiplicative_operator -> MOD','multiplicative_operator',1,'p_multiplicative_operator','parser.py',463),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','parser.py',468),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','parser.py',472),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_3','parser.py',476),
  ('unary_expression -> unary_operator unary_expression','unary_expression',2,'p_unary_expression_4','parser.py',480),
  ('unary_expression -> LPAREN ID RPAREN unary_expression','unary_expression',4,'p_unary_expression_5','parser.py',491),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',496),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',497),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','parser.py',498),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','parser.py',503),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','parser.py',507),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list_opt RPAREN','postfix_expression',4,'p_postfix_expression_3','parser.py',511),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','parser.py',515),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_5','parser.py',519),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression_1','parser.py',524),
  ('primary_expression -> ICONST','primary_expression',1,'p_primary_expression_2','parser.py',528),
  ('primary_expression -> FCONST','primary_expression',1,'p_primary_expression_3','parser.py',533),
  ('primary_expression -> SCONST_D','primary_expression',1,'p_primary_expression_4','parser.py',538),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_5','parser.py',542),
  ('argument_expression_list_opt -> <empty>','argument_expression_list_opt',0,'p_argument_expression_list_opt_1','parser.py',547),
  ('argument_expression_list_opt -> argument_expression_list','argument_expression_list_opt',1,'p_argument_expression_list_opt_2','parser.py',551),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list_1','parser.py',555),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list_2','parser.py',559),
  ('py_expression -> py_m_expression','py_expression',1,'p_py_expression_1','parser.py',592),
  ('py_expression -> py_conditional_expression','py_expression',1,'p_py_expression_2','parser.py',596),
  ('py_expression_list_opt -> <empty>','py_expression_list_opt',0,'p_py_expression_list_opt_1','parser.py',601),
  ('py_expression_list_opt -> py_expression_list','py_expression_list_opt',1,'p_py_expression_list_opt_2','parser.py',605),
  ('py_expression_list -> py_expression','py_expression_list',1,'p_py_expression_list_1','parser.py',609),
  ('py_expression_list -> py_expression_list COMMA py_expression','py_expression_list',3,'p_py_expression_list_2','parser.py',613),
  ('py_conditional_expression -> py_m_expression IF py_m_expression ELSE py_m_expression','py_conditional_expression',5,'p_py_conditional_expression','parser.py',618),
  ('py_m_expression -> py_u_expression','py_m_expression',1,'p_py_m_expression_1','parser.py',623),
  ('py_m_expression -> py_m_expression py_binary_operator py_u_expression','py_m_expression',3,'p_py_m_expression_2','parser.py',627),
  ('py_binary_operator -> PLUS','py_binary_operator',1,'p_py_binary_operator','parser.py',632),
  ('py_binary_operator -> MINUS','py_binary_operator',1,'p_py_binary_operator','parser.py',633),
  ('py_binary_operator -> TIMES','py_binary_operator',1,'p_py_binary_operator','parser.py',634),
  ('py_binary_operator -> DIVIDE','py_binary_operator',1,'p_py_binary_operator','parser.py',635),
  ('py_binary_operator -> MOD','py_binary_operator',1,'p_py_binary_operator','parser.py',636),
  ('py_binary_operator -> LT','py_binary_operator',1,'p_py_binary_operator','parser.py',637),
  ('py_binary_operator -> GT','py_binary_operator',1,'p_py_binary_operator','parser.py',638),
  ('py_binary_operator -> LE','py_binary_operator',1,'p_py_binary_operator','parser.py',639),
  ('py_binary_operator -> GE','py_binary_operator',1,'p_py_binary_operator','parser.py',640),
  ('py_binary_operator -> EQ','py_binary_operator',1,'p_py_binary_operator','parser.py',641),
  ('py_binary_operator -> NE','py_binary_operator',1,'p_py_binary_operator','parser.py',642),
  ('py_binary_operator -> AND','py_binary_operator',1,'p_py_binary_operator','parser.py',643),
  ('py_binary_operator -> OR','py_binary_operator',1,'p_py_binary_operator','parser.py',644),
  ('py_u_expression -> py_primary','py_u_expression',1,'p_py_u_expression_1','parser.py',649),
  ('py_u_expression -> PLUS py_u_expression','py_u_expression',2,'p_py_u_expression_2','parser.py',653),
  ('py_u_expression -> MINUS py_u_expression','py_u_expression',2,'p_py_u_expression_2','parser.py',654),
  ('py_u_expression -> NOT py_u_expression','py_u_expression',2,'p_py_u_expression_2','parser.py',655),
  ('py_primary -> py_atom','py_primary',1,'p_py_primary','parser.py',660),
  ('py_primary -> py_subscription','py_primary',1,'p_py_primary','parser.py',661),
  ('py_primary -> py_attribute_ref','py_primary',1,'p_py_primary','parser.py',662),
  ('py_primary -> py_call','py_primary',1,'p_py_primary','parser.py',663),
  ('py_primary -> py_list_display','py_primary',1,'p_py_primary','parser.py',664),
  ('py_primary -> py_dict_display','py_primary',1,'p_py_primary','parser.py',665),
  ('py_subscription -> py_primary LBRACKET py_expression_list RBRACKET','py_subscription',4,'p_py_subscription','parser.py',670),
  ('py_attribute_ref -> py_primary PERIOD ID','py_attribute_ref',3,'p_py_attribute_ref','parser.py',675),
  ('py_call -> py_primary LPAREN py_expression_list_opt RPAREN','py_call',4,'p_py_call','parser.py',680),
  ('py_list_display -> LBRACKET py_expression_list_opt RBRACKET','py_list_display',3,'p_py_list_display','parser.py',685),
  ('py_dict_display -> LBRACE py_key_datum_list_opt RBRACE','py_dict_display',3,'p_py_dict_display','parser.py',690),
  ('py_key_datum_list_opt -> <empty>','py_key_datum_list_opt',0,'p_py_key_datum_list_opt_1','parser.py',695),
  ('py_key_datum_list_opt -> py_key_datum_list','py_key_datum_list_opt',1,'p_py_key_datum_list_opt_2','parser.py',699),
  ('py_key_datum_list -> py_key_datum','py_key_datum_list',1,'p_py_key_datum_list_1','parser.py',703),
  ('py_key_datum_list -> py_key_datum_list COMMA py_key_datum','py_key_datum_list',3,'p_py_key_datum_list_2','parser.py',707),
  ('py_key_datum -> py_expression COLON py_expression','py_key_datum',3,'p_py_key_datum','parser.py',712),
  ('py_atom -> ID','py_atom',1,'p_py_atom_1','parser.py',717),
  ('py_atom -> ICONST','py_atom',1,'p_py_atom_1','parser.py',718),
  ('py_atom -> FCONST','py_atom',1,'p_py_atom_1','parser.py',719),
  ('py_atom -> SCONST_D','py_atom',1,'p_py_atom_1','parser.py',720),
  ('py_atom -> SCONST_S','py_atom',1,'p_py_atom_1','parser.py',721),
  ('py_atom -> LPAREN py_expression_list_opt RPAREN','py_atom',3,'p_py_atom_2','parser.py',725),
]
