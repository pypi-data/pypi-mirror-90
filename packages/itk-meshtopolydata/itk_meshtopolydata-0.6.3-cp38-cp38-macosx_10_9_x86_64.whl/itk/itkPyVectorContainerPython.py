# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _MeshToPolyDataPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPyVectorContainerPython
else:
    import _itkPyVectorContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPyVectorContainerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPyVectorContainerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorContainerPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.ITKCommonBasePython


HAVE_NUMPY = True
try:
  import numpy
except ImportError:
  HAVE_NUMPY = False

def _get_numpy_pixelid(itk_Image_type):
    """Returns a ITK PixelID given a numpy array."""

    if not HAVE_NUMPY:
        raise ImportError('Numpy not available.')
# This is a Mapping from numpy array types to itk pixel types.
    _np_itk = {"UC":numpy.uint8,
               "US":numpy.uint16,
               "UI":numpy.uint32,
               "UL":numpy.uint64,
               "SC":numpy.int8,
               "SS":numpy.int16,
               "SI":numpy.int32,
               "SL":numpy.int64,
               "F":numpy.float32,
               "D":numpy.float64,
               "PF2":numpy.float32,
               "PF3":numpy.float32,
                }
    import os
    if os.name == 'nt':
        _np_itk['UL'] = numpy.uint32
        _np_itk['SL'] = numpy.int32
    try:
        return _np_itk[itk_Image_type]
    except KeyError as e:
        raise e

class itkPyVectorContainerD(object):
    r"""Proxy of C++ itkPyVectorContainerD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerD__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerD__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerD self) -> itkPyVectorContainerD
        __init__(itkPyVectorContainerD self, itkPyVectorContainerD arg0) -> itkPyVectorContainerD
        """
        _itkPyVectorContainerPython.itkPyVectorContainerD_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerD(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerD


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "D"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerD._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerD.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerD._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerD in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerD_swigregister(itkPyVectorContainerD)
itkPyVectorContainerD__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerD__array_view_from_vector_container
itkPyVectorContainerD__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerD__vector_container_from_array

class itkPyVectorContainerF(object):
    r"""Proxy of C++ itkPyVectorContainerF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerF__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerF__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerF self) -> itkPyVectorContainerF
        __init__(itkPyVectorContainerF self, itkPyVectorContainerF arg0) -> itkPyVectorContainerF
        """
        _itkPyVectorContainerPython.itkPyVectorContainerF_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerF(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerF


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "F"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerF._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerF.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerF._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerF in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerF_swigregister(itkPyVectorContainerF)
itkPyVectorContainerF__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerF__array_view_from_vector_container
itkPyVectorContainerF__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerF__vector_container_from_array

class itkPyVectorContainerPF2(object):
    r"""Proxy of C++ itkPyVectorContainerPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerPF2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerPF2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerPF2 self) -> itkPyVectorContainerPF2
        __init__(itkPyVectorContainerPF2 self, itkPyVectorContainerPF2 arg0) -> itkPyVectorContainerPF2
        """
        _itkPyVectorContainerPython.itkPyVectorContainerPF2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerPF2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerPF2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "PF2"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerPF2._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerPF2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerPF2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerPF2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerPF2_swigregister(itkPyVectorContainerPF2)
itkPyVectorContainerPF2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerPF2__array_view_from_vector_container
itkPyVectorContainerPF2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerPF2__vector_container_from_array

class itkPyVectorContainerPF3(object):
    r"""Proxy of C++ itkPyVectorContainerPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerPF3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerPF3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerPF3 self) -> itkPyVectorContainerPF3
        __init__(itkPyVectorContainerPF3 self, itkPyVectorContainerPF3 arg0) -> itkPyVectorContainerPF3
        """
        _itkPyVectorContainerPython.itkPyVectorContainerPF3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerPF3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerPF3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "PF3"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerPF3._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerPF3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerPF3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerPF3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerPF3_swigregister(itkPyVectorContainerPF3)
itkPyVectorContainerPF3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerPF3__array_view_from_vector_container
itkPyVectorContainerPF3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerPF3__vector_container_from_array

class itkPyVectorContainerSS(object):
    r"""Proxy of C++ itkPyVectorContainerSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerSS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerSS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerSS self) -> itkPyVectorContainerSS
        __init__(itkPyVectorContainerSS self, itkPyVectorContainerSS arg0) -> itkPyVectorContainerSS
        """
        _itkPyVectorContainerPython.itkPyVectorContainerSS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerSS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerSS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "SS"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerSS._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerSS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerSS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerSS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerSS_swigregister(itkPyVectorContainerSS)
itkPyVectorContainerSS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerSS__array_view_from_vector_container
itkPyVectorContainerSS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerSS__vector_container_from_array

class itkPyVectorContainerUC(object):
    r"""Proxy of C++ itkPyVectorContainerUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUC__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUC__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerUC self) -> itkPyVectorContainerUC
        __init__(itkPyVectorContainerUC self, itkPyVectorContainerUC arg0) -> itkPyVectorContainerUC
        """
        _itkPyVectorContainerPython.itkPyVectorContainerUC_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUC(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUC


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "UC"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerUC._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUC.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUC._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUC in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUC_swigregister(itkPyVectorContainerUC)
itkPyVectorContainerUC__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUC__array_view_from_vector_container
itkPyVectorContainerUC__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUC__vector_container_from_array

class itkPyVectorContainerUI(object):
    r"""Proxy of C++ itkPyVectorContainerUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUI__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUI__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerUI self) -> itkPyVectorContainerUI
        __init__(itkPyVectorContainerUI self, itkPyVectorContainerUI arg0) -> itkPyVectorContainerUI
        """
        _itkPyVectorContainerPython.itkPyVectorContainerUI_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUI(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUI


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "UI"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerUI._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUI.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUI._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUI in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUI_swigregister(itkPyVectorContainerUI)
itkPyVectorContainerUI__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUI__array_view_from_vector_container
itkPyVectorContainerUI__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUI__vector_container_from_array

class itkPyVectorContainerUS(object):
    r"""Proxy of C++ itkPyVectorContainerUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(itkPyVectorContainerUS self) -> itkPyVectorContainerUS
        __init__(itkPyVectorContainerUS self, itkPyVectorContainerUS arg0) -> itkPyVectorContainerUS
        """
        _itkPyVectorContainerPython.itkPyVectorContainerUS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            element_type = itk.template(container_type[1][1])
            dimension = element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        pixelType     = "US"
        numpydatatype = _get_numpy_pixelid(pixelType)
        memview       = itkPyVectorContainerUS._array_view_from_vector_container(vector_container)
        ndarrview  = numpy.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(numpy.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return numpy.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        if not HAVE_NUMPY:
            raise ImportError('Numpy not available.')

        assert ndarr.ndim == 1 , \
            "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUS_swigregister(itkPyVectorContainerUS)
itkPyVectorContainerUS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUS__array_view_from_vector_container
itkPyVectorContainerUS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUS__vector_container_from_array



